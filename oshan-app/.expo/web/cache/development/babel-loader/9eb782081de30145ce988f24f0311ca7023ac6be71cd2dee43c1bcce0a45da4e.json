{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { getApp, initializeAuth, getReactNativePersistence, onAuthStateChanged, onIdTokenChanged, signInAnonymously as _signInAnonymously, sendSignInLinkToEmail as _sendSignInLinkToEmail, getAdditionalUserInfo, multiFactor, createUserWithEmailAndPassword as _createUserWithEmailAndPassword, signInWithEmailAndPassword as _signInWithEmailAndPassword, isSignInWithEmailLink as _isSignInWithEmailLink, signInWithEmailLink as _signInWithEmailLink, signInWithCustomToken as _signInWithCustomToken, sendPasswordResetEmail as _sendPasswordResetEmail, useDeviceLanguage as _useDeviceLanguage, verifyPasswordResetCode as _verifyPasswordResetCode, connectAuthEmulator, fetchSignInMethodsForEmail as _fetchSignInMethodsForEmail, sendEmailVerification as _sendEmailVerification, verifyBeforeUpdateEmail as _verifyBeforeUpdateEmail, confirmPasswordReset as _confirmPasswordReset, updateEmail as _updateEmail, updatePassword as _updatePassword, updateProfile as _updateProfile, updatePhoneNumber as _updatePhoneNumber, signInWithCredential as _signInWithCredential, unlink as _unlink, linkWithCredential as _linkWithCredential, reauthenticateWithCredential as _reauthenticateWithCredential, getIdToken as _getIdToken, getIdTokenResult as _getIdTokenResult, applyActionCode as _applyActionCode, checkActionCode as _checkActionCode, EmailAuthProvider, FacebookAuthProvider, GoogleAuthProvider, TwitterAuthProvider, GithubAuthProvider, PhoneAuthProvider, OAuthProvider } from '@react-native-firebase/app/lib/internal/web/firebaseAuth';\nimport { guard, getWebError, emitEvent } from '@react-native-firebase/app/lib/internal/web/utils';\nimport { getReactNativeAsyncStorageInternal, isMemoryStorage } from '@react-native-firebase/app/lib/internal/asyncStorage';\nfunction promiseNoUser() {\n  var isError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  if (isError) {\n    return rejectPromiseWithCodeAndMessage('no-current-user', 'No user currently signed in.');\n  }\n  return Promise.resolve(null);\n}\nfunction rejectPromiseWithCodeAndMessage(code, message) {\n  return rejectPromise(getWebError({\n    code: `auth/${code}`,\n    message: message\n  }));\n}\nfunction rejectPromise(error) {\n  var code = error.code,\n    message = error.message,\n    details = error.details;\n  var nativeError = {\n    code: code,\n    message: message,\n    userInfo: {\n      code: code ? code.replace('auth/', '') : 'unknown',\n      message: message,\n      details: details\n    }\n  };\n  return Promise.reject(nativeError);\n}\nfunction userToObject(user) {\n  return _objectSpread(_objectSpread({}, userInfoToObject(user)), {}, {\n    emailVerified: user.emailVerified,\n    isAnonymous: user.isAnonymous,\n    tenantId: user.tenantId !== null && user.tenantId !== '' ? user.tenantId : null,\n    providerData: user.providerData.map(userInfoToObject),\n    metadata: userMetadataToObject(user.metadata),\n    multiFactor: multiFactor(user).enrolledFactors.map(multiFactorInfoToObject)\n  });\n}\nfunction getAuthCredential(_auth, provider, token, secret) {\n  if (provider.startsWith('oidc.')) {\n    return new OAuthProvider(provider).credential({\n      idToken: token\n    });\n  }\n  switch (provider) {\n    case 'facebook.com':\n      return FacebookAuthProvider().credential(token);\n    case 'google.com':\n      return GoogleAuthProvider().credential(token, secret);\n    case 'twitter.com':\n      return TwitterAuthProvider().credential(token, secret);\n    case 'github.com':\n      return GithubAuthProvider().credential(token);\n    case 'apple.com':\n      return new OAuthProvider(provider).credential({\n        idToken: token,\n        rawNonce: secret\n      });\n    case 'oauth':\n      return OAuthProvider(provider).credential({\n        idToken: token,\n        accessToken: secret\n      });\n    case 'phone':\n      return PhoneAuthProvider.credential(token, secret);\n    case 'password':\n      return EmailAuthProvider.credential(token, secret);\n    case 'emailLink':\n      return EmailAuthProvider.credentialWithLink(token, secret);\n    default:\n      return null;\n  }\n}\nfunction userInfoToObject(userInfo) {\n  return {\n    providerId: userInfo.providerId,\n    uid: userInfo.uid,\n    displayName: userInfo.displayName !== null && userInfo.displayName !== '' ? userInfo.displayName : null,\n    email: userInfo.email !== null && userInfo.email !== '' ? userInfo.email : null,\n    photoURL: userInfo.photoURL !== null && userInfo.photoURL !== '' ? userInfo.photoURL : null,\n    phoneNumber: userInfo.phoneNumber !== null && userInfo.phoneNumber !== '' ? userInfo.phoneNumber : null\n  };\n}\nfunction userMetadataToObject(metadata) {\n  return {\n    creationTime: metadata.creationTime ? new Date(metadata.creationTime).toISOString() : null,\n    lastSignInTime: metadata.lastSignInTime ? new Date(metadata.lastSignInTime).toISOString() : null\n  };\n}\nfunction multiFactorInfoToObject(multiFactorInfo) {\n  var obj = {\n    displayName: multiFactorInfo.displayName,\n    enrollmentTime: multiFactorInfo.enrollmentTime,\n    factorId: multiFactorInfo.factorId,\n    uid: multiFactorInfo.uid\n  };\n  if ('phoneNumber' in multiFactorInfo) {\n    obj.phoneNumber = multiFactorInfo.phoneNumber;\n  }\n  return obj;\n}\nfunction authResultToObject(userCredential) {\n  var additional = getAdditionalUserInfo(userCredential);\n  return {\n    user: userToObject(userCredential.user),\n    additionalUserInfo: {\n      isNewUser: additional.isNewUser,\n      profile: additional.profile,\n      providerId: additional.providerId,\n      username: additional.username\n    }\n  };\n}\nvar instances = {};\nvar authStateListeners = {};\nvar idTokenListeners = {};\nvar sessionMap = new Map();\nvar sessionId = 0;\nfunction getCachedAuthInstance(appName) {\n  if (!instances[appName]) {\n    if (!isMemoryStorage()) {\n      console.warn('Firebase Auth persistence is disabled. To enable persistence, provide an Async Storage implementation.\\n' + '\\n' + 'For example, to use React Native Async Storage:\\n' + '\\n' + \"  import AsyncStorage from '@react-native-async-storage/async-storage';\\n\" + '\\n' + '  // Before initializing Firebase set the Async Storage implementation\\n' + '  // that will be used to persist user sessions.\\n' + '  firebase.setReactNativeAsyncStorage(AsyncStorage);\\n' + '\\n' + '  // Then initialize Firebase as normal.\\n' + '  await firebase.initializeApp({ ... });\\n');\n    }\n    instances[appName] = initializeAuth(getApp(appName), {\n      persistence: getReactNativePersistence(getReactNativeAsyncStorageInternal())\n    });\n  }\n  return instances[appName];\n}\nvar CONSTANTS = {\n  APP_LANGUAGE: {},\n  APP_USER: {}\n};\nexport default _objectSpread(_objectSpread({}, CONSTANTS), {}, {\n  useUserAccessGroup: function () {\n    var _useUserAccessGroup = _asyncToGenerator(function* () {});\n    function useUserAccessGroup() {\n      return _useUserAccessGroup.apply(this, arguments);\n    }\n    return useUserAccessGroup;\n  }(),\n  configureAuthDomain: function configureAuthDomain() {\n    return rejectPromiseWithCodeAndMessage('unsupported', 'This operation is not supported in this environment.');\n  },\n  getCustomAuthDomain: function () {\n    var _getCustomAuthDomain = _asyncToGenerator(function* () {\n      return rejectPromiseWithCodeAndMessage('unsupported', 'This operation is not supported in this environment.');\n    });\n    function getCustomAuthDomain() {\n      return _getCustomAuthDomain.apply(this, arguments);\n    }\n    return getCustomAuthDomain;\n  }(),\n  addAuthStateListener: function addAuthStateListener(appName) {\n    if (authStateListeners[appName]) {\n      return;\n    }\n    return guard(_asyncToGenerator(function* () {\n      var auth = getCachedAuthInstance(appName);\n      authStateListeners[appName] = onAuthStateChanged(auth, function (user) {\n        emitEvent('auth_state_changed', {\n          appName: appName,\n          user: user ? userToObject(user) : null\n        });\n      });\n    }));\n  },\n  removeAuthStateListener: function removeAuthStateListener(appName) {\n    if (authStateListeners[appName]) {\n      authStateListeners[appName]();\n      delete authStateListeners[appName];\n    }\n  },\n  addIdTokenListener: function addIdTokenListener(appName) {\n    if (idTokenListeners[appName]) {\n      return;\n    }\n    return guard(_asyncToGenerator(function* () {\n      var auth = getCachedAuthInstance(appName);\n      idTokenListeners[appName] = onIdTokenChanged(auth, function (user) {\n        emitEvent('auth_id_token_changed', {\n          authenticated: !!user,\n          appName: appName,\n          user: user ? userToObject(user) : null\n        });\n      });\n    }));\n  },\n  removeIdTokenListener: function removeIdTokenListener(appName) {\n    if (idTokenListeners[appName]) {\n      idTokenListeners[appName]();\n      delete idTokenListeners[appName];\n    }\n  },\n  forceRecaptchaFlowForTesting: function () {\n    var _forceRecaptchaFlowForTesting = _asyncToGenerator(function* () {\n      return rejectPromiseWithCodeAndMessage('unsupported', 'This operation is not supported in this environment.');\n    });\n    function forceRecaptchaFlowForTesting() {\n      return _forceRecaptchaFlowForTesting.apply(this, arguments);\n    }\n    return forceRecaptchaFlowForTesting;\n  }(),\n  setAutoRetrievedSmsCodeForPhoneNumber: function () {\n    var _setAutoRetrievedSmsCodeForPhoneNumber = _asyncToGenerator(function* () {\n      return rejectPromiseWithCodeAndMessage('unsupported', 'This operation is not supported in this environment.');\n    });\n    function setAutoRetrievedSmsCodeForPhoneNumber() {\n      return _setAutoRetrievedSmsCodeForPhoneNumber.apply(this, arguments);\n    }\n    return setAutoRetrievedSmsCodeForPhoneNumber;\n  }(),\n  setAppVerificationDisabledForTesting: function () {\n    var _setAppVerificationDisabledForTesting = _asyncToGenerator(function* () {\n      return rejectPromiseWithCodeAndMessage('unsupported', 'This operation is not supported in this environment.');\n    });\n    function setAppVerificationDisabledForTesting() {\n      return _setAppVerificationDisabledForTesting.apply(this, arguments);\n    }\n    return setAppVerificationDisabledForTesting;\n  }(),\n  signOut: function signOut(appName) {\n    return guard(_asyncToGenerator(function* () {\n      var auth = getCachedAuthInstance(appName);\n      if (auth.currentUser === null) {\n        return promiseNoUser(true);\n      }\n      yield auth.signOut();\n      return promiseNoUser();\n    }));\n  },\n  signInAnonymously: function signInAnonymously(appName) {\n    return guard(_asyncToGenerator(function* () {\n      var auth = getCachedAuthInstance(appName);\n      var credential = yield _signInAnonymously(auth);\n      return authResultToObject(credential);\n    }));\n  },\n  createUserWithEmailAndPassword: function () {\n    var _createUserWithEmailAndPassword2 = _asyncToGenerator(function* (appName, email, password) {\n      return guard(_asyncToGenerator(function* () {\n        var auth = getCachedAuthInstance(appName);\n        var credential = yield _createUserWithEmailAndPassword(auth, email, password);\n        return authResultToObject(credential);\n      }));\n    });\n    function createUserWithEmailAndPassword(_x, _x2, _x3) {\n      return _createUserWithEmailAndPassword2.apply(this, arguments);\n    }\n    return createUserWithEmailAndPassword;\n  }(),\n  signInWithEmailAndPassword: function () {\n    var _signInWithEmailAndPassword2 = _asyncToGenerator(function* (appName, email, password) {\n      return guard(_asyncToGenerator(function* () {\n        var auth = getCachedAuthInstance(appName);\n        var credential = yield _signInWithEmailAndPassword(auth, email, password);\n        return authResultToObject(credential);\n      }));\n    });\n    function signInWithEmailAndPassword(_x4, _x5, _x6) {\n      return _signInWithEmailAndPassword2.apply(this, arguments);\n    }\n    return signInWithEmailAndPassword;\n  }(),\n  isSignInWithEmailLink: function () {\n    var _isSignInWithEmailLink2 = _asyncToGenerator(function* (appName, emailLink) {\n      return guard(_asyncToGenerator(function* () {\n        var auth = getCachedAuthInstance(appName);\n        return yield _isSignInWithEmailLink(auth, emailLink);\n      }));\n    });\n    function isSignInWithEmailLink(_x7, _x8) {\n      return _isSignInWithEmailLink2.apply(this, arguments);\n    }\n    return isSignInWithEmailLink;\n  }(),\n  signInWithEmailLink: function () {\n    var _signInWithEmailLink2 = _asyncToGenerator(function* (appName, email, emailLink) {\n      return guard(_asyncToGenerator(function* () {\n        var auth = getCachedAuthInstance(appName);\n        var credential = yield _signInWithEmailLink(auth, email, emailLink);\n        return authResultToObject(credential);\n      }));\n    });\n    function signInWithEmailLink(_x9, _x0, _x1) {\n      return _signInWithEmailLink2.apply(this, arguments);\n    }\n    return signInWithEmailLink;\n  }(),\n  signInWithCustomToken: function () {\n    var _signInWithCustomToken2 = _asyncToGenerator(function* (appName, token) {\n      return guard(_asyncToGenerator(function* () {\n        var auth = getCachedAuthInstance(appName);\n        var credential = yield _signInWithCustomToken(auth, token);\n        return authResultToObject(credential);\n      }));\n    });\n    function signInWithCustomToken(_x10, _x11) {\n      return _signInWithCustomToken2.apply(this, arguments);\n    }\n    return signInWithCustomToken;\n  }(),\n  revokeToken: function () {\n    var _revokeToken = _asyncToGenerator(function* () {\n      return promiseNoUser();\n    });\n    function revokeToken() {\n      return _revokeToken.apply(this, arguments);\n    }\n    return revokeToken;\n  }(),\n  sendPasswordResetEmail: function () {\n    var _sendPasswordResetEmail2 = _asyncToGenerator(function* (appName, email, settings) {\n      return guard(_asyncToGenerator(function* () {\n        var auth = getCachedAuthInstance(appName);\n        yield _sendPasswordResetEmail(auth, email, settings);\n        return promiseNoUser();\n      }));\n    });\n    function sendPasswordResetEmail(_x12, _x13, _x14) {\n      return _sendPasswordResetEmail2.apply(this, arguments);\n    }\n    return sendPasswordResetEmail;\n  }(),\n  sendSignInLinkToEmail: function () {\n    var _sendSignInLinkToEmail2 = _asyncToGenerator(function* (appName, email, settings) {\n      return guard(_asyncToGenerator(function* () {\n        var auth = getCachedAuthInstance(appName);\n        yield _sendSignInLinkToEmail(auth, email, settings);\n        return promiseNoUser();\n      }));\n    });\n    function sendSignInLinkToEmail(_x15, _x16, _x17) {\n      return _sendSignInLinkToEmail2.apply(this, arguments);\n    }\n    return sendSignInLinkToEmail;\n  }(),\n  delete: function () {\n    var _delete2 = _asyncToGenerator(function* (appName) {\n      return guard(_asyncToGenerator(function* () {\n        var auth = getCachedAuthInstance(appName);\n        if (auth.currentUser === null) {\n          return promiseNoUser(true);\n        }\n        yield auth.currentUser.delete();\n        return promiseNoUser();\n      }));\n    });\n    function _delete(_x18) {\n      return _delete2.apply(this, arguments);\n    }\n    return _delete;\n  }(),\n  reload: function () {\n    var _reload = _asyncToGenerator(function* (appName) {\n      return guard(_asyncToGenerator(function* () {\n        var auth = getCachedAuthInstance(appName);\n        if (auth.currentUser === null) {\n          return promiseNoUser(true);\n        }\n        yield auth.currentUser.reload();\n        return userToObject(auth.currentUser);\n      }));\n    });\n    function reload(_x19) {\n      return _reload.apply(this, arguments);\n    }\n    return reload;\n  }(),\n  sendEmailVerification: function () {\n    var _sendEmailVerification2 = _asyncToGenerator(function* (appName, actionCodeSettings) {\n      return guard(_asyncToGenerator(function* () {\n        var auth = getCachedAuthInstance(appName);\n        if (auth.currentUser === null) {\n          return promiseNoUser(true);\n        }\n        yield _sendEmailVerification(auth.currentUser, actionCodeSettings);\n        return userToObject(auth.currentUser);\n      }));\n    });\n    function sendEmailVerification(_x20, _x21) {\n      return _sendEmailVerification2.apply(this, arguments);\n    }\n    return sendEmailVerification;\n  }(),\n  verifyBeforeUpdateEmail: function () {\n    var _verifyBeforeUpdateEmail2 = _asyncToGenerator(function* (appName, email, actionCodeSettings) {\n      return guard(_asyncToGenerator(function* () {\n        var auth = getCachedAuthInstance(appName);\n        if (auth.currentUser === null) {\n          return promiseNoUser(true);\n        }\n        yield _verifyBeforeUpdateEmail(auth.currentUser, email, actionCodeSettings);\n        return userToObject(auth.currentUser);\n      }));\n    });\n    function verifyBeforeUpdateEmail(_x22, _x23, _x24) {\n      return _verifyBeforeUpdateEmail2.apply(this, arguments);\n    }\n    return verifyBeforeUpdateEmail;\n  }(),\n  updateEmail: function () {\n    var _updateEmail2 = _asyncToGenerator(function* (appName, email) {\n      return guard(_asyncToGenerator(function* () {\n        var auth = getCachedAuthInstance(appName);\n        if (auth.currentUser === null) {\n          return promiseNoUser(true);\n        }\n        yield _updateEmail(auth.currentUser, email);\n        return userToObject(auth.currentUser);\n      }));\n    });\n    function updateEmail(_x25, _x26) {\n      return _updateEmail2.apply(this, arguments);\n    }\n    return updateEmail;\n  }(),\n  updatePassword: function () {\n    var _updatePassword2 = _asyncToGenerator(function* (appName, password) {\n      return guard(_asyncToGenerator(function* () {\n        var auth = getCachedAuthInstance(appName);\n        if (auth.currentUser === null) {\n          return promiseNoUser(true);\n        }\n        yield _updatePassword(auth.currentUser, password);\n        return userToObject(auth.currentUser);\n      }));\n    });\n    function updatePassword(_x27, _x28) {\n      return _updatePassword2.apply(this, arguments);\n    }\n    return updatePassword;\n  }(),\n  updatePhoneNumber: function () {\n    var _updatePhoneNumber2 = _asyncToGenerator(function* (appName, provider, authToken, authSecret) {\n      return guard(_asyncToGenerator(function* () {\n        var auth = getCachedAuthInstance(appName);\n        if (auth.currentUser === null) {\n          return promiseNoUser(true);\n        }\n        if (provider !== 'phone') {\n          return rejectPromiseWithCodeAndMessage('invalid-credential', 'The supplied auth credential does not have a phone provider.');\n        }\n        var credential = getAuthCredential(auth, provider, authToken, authSecret);\n        if (!credential) {\n          return rejectPromiseWithCodeAndMessage('invalid-credential', 'The supplied auth credential is malformed, has expired or is not currently supported.');\n        }\n        yield _updatePhoneNumber(auth.currentUser, credential);\n        return userToObject(auth.currentUser);\n      }));\n    });\n    function updatePhoneNumber(_x29, _x30, _x31, _x32) {\n      return _updatePhoneNumber2.apply(this, arguments);\n    }\n    return updatePhoneNumber;\n  }(),\n  updateProfile: function () {\n    var _updateProfile2 = _asyncToGenerator(function* (appName, props) {\n      return guard(_asyncToGenerator(function* () {\n        var auth = getCachedAuthInstance(appName);\n        if (auth.currentUser === null) {\n          return promiseNoUser(true);\n        }\n        yield _updateProfile(auth.currentUser, {\n          displayName: props.displayName,\n          photoURL: props.photoURL\n        });\n        return userToObject(auth.currentUser);\n      }));\n    });\n    function updateProfile(_x33, _x34) {\n      return _updateProfile2.apply(this, arguments);\n    }\n    return updateProfile;\n  }(),\n  signInWithCredential: function () {\n    var _signInWithCredential2 = _asyncToGenerator(function* (appName, provider, authToken, authSecret) {\n      return guard(_asyncToGenerator(function* () {\n        var auth = getCachedAuthInstance(appName);\n        var credential = getAuthCredential(auth, provider, authToken, authSecret);\n        if (credential === null) {\n          return rejectPromiseWithCodeAndMessage('invalid-credential', 'The supplied auth credential is malformed, has expired or is not currently supported.');\n        }\n        var credentialResult = yield _signInWithCredential(auth, credential);\n        return authResultToObject(credentialResult);\n      }));\n    });\n    function signInWithCredential(_x35, _x36, _x37, _x38) {\n      return _signInWithCredential2.apply(this, arguments);\n    }\n    return signInWithCredential;\n  }(),\n  signInWithProvider: function () {\n    var _signInWithProvider = _asyncToGenerator(function* () {\n      return rejectPromiseWithCodeAndMessage('unsupported', 'This operation is not supported in this environment.');\n    });\n    function signInWithProvider() {\n      return _signInWithProvider.apply(this, arguments);\n    }\n    return signInWithProvider;\n  }(),\n  signInWithPhoneNumber: function () {\n    var _signInWithPhoneNumber = _asyncToGenerator(function* () {\n      return rejectPromiseWithCodeAndMessage('unsupported', 'This operation is not supported in this environment.');\n    });\n    function signInWithPhoneNumber() {\n      return _signInWithPhoneNumber.apply(this, arguments);\n    }\n    return signInWithPhoneNumber;\n  }(),\n  getSession: function () {\n    var _getSession = _asyncToGenerator(function* (appName) {\n      return guard(_asyncToGenerator(function* () {\n        var auth = getCachedAuthInstance(appName);\n        if (auth.currentUser === null) {\n          return promiseNoUser(true);\n        }\n        var session = yield multiFactor(auth.currentUser).getSession();\n        sessionId++;\n        var key = `${sessionId}`;\n        sessionMap.set(key, session);\n        return key;\n      }));\n    });\n    function getSession(_x39) {\n      return _getSession.apply(this, arguments);\n    }\n    return getSession;\n  }(),\n  verifyPhoneNumberForMultiFactor: function verifyPhoneNumberForMultiFactor() {\n    return rejectPromiseWithCodeAndMessage('unsupported', 'This operation is not supported in this environment.');\n  },\n  finalizeMultiFactorEnrollment: function finalizeMultiFactorEnrollment() {\n    return rejectPromiseWithCodeAndMessage('unsupported', 'This operation is not supported in this environment.');\n  },\n  resolveMultiFactorSignIn: function resolveMultiFactorSignIn() {\n    return rejectPromiseWithCodeAndMessage('unsupported', 'This operation is not supported in this environment.');\n  },\n  confirmationResultConfirm: function confirmationResultConfirm() {\n    return rejectPromiseWithCodeAndMessage('unsupported', 'This operation is not supported in this environment.');\n  },\n  verifyPhoneNumber: function verifyPhoneNumber() {\n    return rejectPromiseWithCodeAndMessage('unsupported', 'This operation is not supported in this environment.');\n  },\n  confirmPasswordReset: function () {\n    var _confirmPasswordReset2 = _asyncToGenerator(function* (appName, code, newPassword) {\n      return guard(_asyncToGenerator(function* () {\n        var auth = getCachedAuthInstance(appName);\n        yield _confirmPasswordReset(auth, code, newPassword);\n        return promiseNoUser();\n      }));\n    });\n    function confirmPasswordReset(_x40, _x41, _x42) {\n      return _confirmPasswordReset2.apply(this, arguments);\n    }\n    return confirmPasswordReset;\n  }(),\n  applyActionCode: function () {\n    var _applyActionCode2 = _asyncToGenerator(function* (appName, code) {\n      return guard(_asyncToGenerator(function* () {\n        var auth = getCachedAuthInstance(appName);\n        yield _applyActionCode(auth, code);\n      }));\n    });\n    function applyActionCode(_x43, _x44) {\n      return _applyActionCode2.apply(this, arguments);\n    }\n    return applyActionCode;\n  }(),\n  checkActionCode: function () {\n    var _checkActionCode2 = _asyncToGenerator(function* (appName, code) {\n      return guard(_asyncToGenerator(function* () {\n        var auth = getCachedAuthInstance(appName);\n        var result = yield _checkActionCode(auth, code);\n        return {\n          operation: result.operation,\n          data: {\n            email: result.data.email,\n            fromEmail: result.data.previousEmail\n          }\n        };\n      }));\n    });\n    function checkActionCode(_x45, _x46) {\n      return _checkActionCode2.apply(this, arguments);\n    }\n    return checkActionCode;\n  }(),\n  linkWithCredential: function () {\n    var _linkWithCredential2 = _asyncToGenerator(function* (appName, provider, authToken, authSecret) {\n      return guard(_asyncToGenerator(function* () {\n        var auth = getCachedAuthInstance(appName);\n        var credential = getAuthCredential(auth, provider, authToken, authSecret);\n        if (credential === null) {\n          return rejectPromiseWithCodeAndMessage('invalid-credential', 'The supplied auth credential is malformed, has expired or is not currently supported.');\n        }\n        if (auth.currentUser === null) {\n          return promiseNoUser(true);\n        }\n        return authResultToObject(yield _linkWithCredential(auth.currentUser, credential));\n      }));\n    });\n    function linkWithCredential(_x47, _x48, _x49, _x50) {\n      return _linkWithCredential2.apply(this, arguments);\n    }\n    return linkWithCredential;\n  }(),\n  linkWithProvider: function () {\n    var _linkWithProvider = _asyncToGenerator(function* () {\n      return rejectPromiseWithCodeAndMessage('unsupported', 'This operation is not supported in this environment.');\n    });\n    function linkWithProvider() {\n      return _linkWithProvider.apply(this, arguments);\n    }\n    return linkWithProvider;\n  }(),\n  unlink: function () {\n    var _unlink2 = _asyncToGenerator(function* (appName, providerId) {\n      return guard(_asyncToGenerator(function* () {\n        var auth = getCachedAuthInstance(appName);\n        if (auth.currentUser === null) {\n          return promiseNoUser(true);\n        }\n        var user = yield _unlink(auth.currentUser, providerId);\n        return userToObject(user);\n      }));\n    });\n    function unlink(_x51, _x52) {\n      return _unlink2.apply(this, arguments);\n    }\n    return unlink;\n  }(),\n  reauthenticateWithCredential: function () {\n    var _reauthenticateWithCredential2 = _asyncToGenerator(function* (appName, provider, authToken, authSecret) {\n      return guard(_asyncToGenerator(function* () {\n        var auth = getCachedAuthInstance(appName);\n        var credential = getAuthCredential(auth, provider, authToken, authSecret);\n        if (credential === null) {\n          return rejectPromiseWithCodeAndMessage('invalid-credential', 'The supplied auth credential is malformed, has expired or is not currently supported.');\n        }\n        if (auth.currentUser === null) {\n          return promiseNoUser(true);\n        }\n        return authResultToObject(yield _reauthenticateWithCredential(auth.currentUser, credential));\n      }));\n    });\n    function reauthenticateWithCredential(_x53, _x54, _x55, _x56) {\n      return _reauthenticateWithCredential2.apply(this, arguments);\n    }\n    return reauthenticateWithCredential;\n  }(),\n  reauthenticateWithProvider: function () {\n    var _reauthenticateWithProvider = _asyncToGenerator(function* () {\n      return rejectPromiseWithCodeAndMessage('unsupported', 'This operation is not supported in this environment.');\n    });\n    function reauthenticateWithProvider() {\n      return _reauthenticateWithProvider.apply(this, arguments);\n    }\n    return reauthenticateWithProvider;\n  }(),\n  getIdToken: function () {\n    var _getIdToken2 = _asyncToGenerator(function* (appName, forceRefresh) {\n      return guard(_asyncToGenerator(function* () {\n        var auth = getCachedAuthInstance(appName);\n        if (auth.currentUser === null) {\n          return promiseNoUser(true);\n        }\n        var token = yield _getIdToken(auth.currentUser, forceRefresh);\n        return token;\n      }));\n    });\n    function getIdToken(_x57, _x58) {\n      return _getIdToken2.apply(this, arguments);\n    }\n    return getIdToken;\n  }(),\n  getIdTokenResult: function () {\n    var _getIdTokenResult2 = _asyncToGenerator(function* (appName, forceRefresh) {\n      return guard(_asyncToGenerator(function* () {\n        var auth = getCachedAuthInstance(appName);\n        if (auth.currentUser === null) {\n          return promiseNoUser(true);\n        }\n        var result = yield _getIdTokenResult(auth.currentUser, forceRefresh);\n        return {\n          authTime: result.authTime,\n          expirationTime: result.expirationTime,\n          issuedAtTime: result.issuedAtTime,\n          claims: result.claims,\n          signInProvider: result.signInProvider,\n          token: result.token\n        };\n      }));\n    });\n    function getIdTokenResult(_x59, _x60) {\n      return _getIdTokenResult2.apply(this, arguments);\n    }\n    return getIdTokenResult;\n  }(),\n  fetchSignInMethodsForEmail: function () {\n    var _fetchSignInMethodsForEmail2 = _asyncToGenerator(function* (appName, email) {\n      return guard(_asyncToGenerator(function* () {\n        var auth = getCachedAuthInstance(appName);\n        var methods = yield _fetchSignInMethodsForEmail(auth, email);\n        return methods;\n      }));\n    });\n    function fetchSignInMethodsForEmail(_x61, _x62) {\n      return _fetchSignInMethodsForEmail2.apply(this, arguments);\n    }\n    return fetchSignInMethodsForEmail;\n  }(),\n  setLanguageCode: function setLanguageCode(appName, code) {\n    return guard(_asyncToGenerator(function* () {\n      var auth = getCachedAuthInstance(appName);\n      auth.languageCode = code;\n    }));\n  },\n  setTenantId: function setTenantId(appName, tenantId) {\n    return guard(_asyncToGenerator(function* () {\n      var auth = getCachedAuthInstance(appName);\n      auth.tenantId = tenantId;\n    }));\n  },\n  useDeviceLanguage: function useDeviceLanguage(appName) {\n    return guard(_asyncToGenerator(function* () {\n      var auth = getCachedAuthInstance(appName);\n      _useDeviceLanguage(auth);\n    }));\n  },\n  verifyPasswordResetCode: function verifyPasswordResetCode(appName, code) {\n    return guard(_asyncToGenerator(function* () {\n      var auth = getCachedAuthInstance(appName);\n      var email = yield _verifyPasswordResetCode(auth, code);\n      return email;\n    }));\n  },\n  useEmulator: function useEmulator(appName, host, port) {\n    return guard(_asyncToGenerator(function* () {\n      var auth = getCachedAuthInstance(appName);\n      connectAuthEmulator(auth, `http://${host}:${port}`);\n    }));\n  }\n});","map":{"version":3,"names":["getApp","initializeAuth","getReactNativePersistence","onAuthStateChanged","onIdTokenChanged","signInAnonymously","sendSignInLinkToEmail","getAdditionalUserInfo","multiFactor","createUserWithEmailAndPassword","signInWithEmailAndPassword","isSignInWithEmailLink","signInWithEmailLink","signInWithCustomToken","sendPasswordResetEmail","useDeviceLanguage","verifyPasswordResetCode","connectAuthEmulator","fetchSignInMethodsForEmail","sendEmailVerification","verifyBeforeUpdateEmail","confirmPasswordReset","updateEmail","updatePassword","updateProfile","updatePhoneNumber","signInWithCredential","unlink","linkWithCredential","reauthenticateWithCredential","getIdToken","getIdTokenResult","applyActionCode","checkActionCode","EmailAuthProvider","FacebookAuthProvider","GoogleAuthProvider","TwitterAuthProvider","GithubAuthProvider","PhoneAuthProvider","OAuthProvider","guard","getWebError","emitEvent","getReactNativeAsyncStorageInternal","isMemoryStorage","promiseNoUser","isError","arguments","length","undefined","rejectPromiseWithCodeAndMessage","Promise","resolve","code","message","rejectPromise","error","details","nativeError","userInfo","replace","reject","userToObject","user","_objectSpread","userInfoToObject","emailVerified","isAnonymous","tenantId","providerData","map","metadata","userMetadataToObject","enrolledFactors","multiFactorInfoToObject","getAuthCredential","_auth","provider","token","secret","startsWith","credential","idToken","rawNonce","accessToken","credentialWithLink","providerId","uid","displayName","email","photoURL","phoneNumber","creationTime","Date","toISOString","lastSignInTime","multiFactorInfo","obj","enrollmentTime","factorId","authResultToObject","userCredential","additional","additionalUserInfo","isNewUser","profile","username","instances","authStateListeners","idTokenListeners","sessionMap","Map","sessionId","getCachedAuthInstance","appName","console","warn","persistence","CONSTANTS","APP_LANGUAGE","APP_USER","useUserAccessGroup","_useUserAccessGroup","_asyncToGenerator","apply","configureAuthDomain","getCustomAuthDomain","_getCustomAuthDomain","addAuthStateListener","auth","removeAuthStateListener","addIdTokenListener","authenticated","removeIdTokenListener","forceRecaptchaFlowForTesting","_forceRecaptchaFlowForTesting","setAutoRetrievedSmsCodeForPhoneNumber","_setAutoRetrievedSmsCodeForPhoneNumber","setAppVerificationDisabledForTesting","_setAppVerificationDisabledForTesting","signOut","currentUser","_createUserWithEmailAndPassword2","password","_x","_x2","_x3","_signInWithEmailAndPassword2","_x4","_x5","_x6","_isSignInWithEmailLink2","emailLink","_x7","_x8","_signInWithEmailLink2","_x9","_x0","_x1","_signInWithCustomToken2","_x10","_x11","revokeToken","_revokeToken","_sendPasswordResetEmail2","settings","_x12","_x13","_x14","_sendSignInLinkToEmail2","_x15","_x16","_x17","delete","_delete2","_x18","reload","_reload","_x19","_sendEmailVerification2","actionCodeSettings","_x20","_x21","_verifyBeforeUpdateEmail2","_x22","_x23","_x24","_updateEmail2","_x25","_x26","_updatePassword2","_x27","_x28","_updatePhoneNumber2","authToken","authSecret","_x29","_x30","_x31","_x32","_updateProfile2","props","_x33","_x34","_signInWithCredential2","credentialResult","_x35","_x36","_x37","_x38","signInWithProvider","_signInWithProvider","signInWithPhoneNumber","_signInWithPhoneNumber","getSession","_getSession","session","key","set","_x39","verifyPhoneNumberForMultiFactor","finalizeMultiFactorEnrollment","resolveMultiFactorSignIn","confirmationResultConfirm","verifyPhoneNumber","_confirmPasswordReset2","newPassword","_x40","_x41","_x42","_applyActionCode2","_x43","_x44","_checkActionCode2","result","operation","data","fromEmail","previousEmail","_x45","_x46","_linkWithCredential2","_x47","_x48","_x49","_x50","linkWithProvider","_linkWithProvider","_unlink2","_x51","_x52","_reauthenticateWithCredential2","_x53","_x54","_x55","_x56","reauthenticateWithProvider","_reauthenticateWithProvider","_getIdToken2","forceRefresh","_x57","_x58","_getIdTokenResult2","authTime","expirationTime","issuedAtTime","claims","signInProvider","_x59","_x60","_fetchSignInMethodsForEmail2","methods","_x61","_x62","setLanguageCode","languageCode","setTenantId","useEmulator","host","port"],"sources":["/Users/akhileshgogikar/Oshan/oshan-app/node_modules/@react-native-firebase/auth/lib/web/RNFBAuthModule.js"],"sourcesContent":["import {\n  getApp,\n  initializeAuth,\n  getReactNativePersistence,\n  onAuthStateChanged,\n  onIdTokenChanged,\n  signInAnonymously,\n  sendSignInLinkToEmail,\n  getAdditionalUserInfo,\n  multiFactor,\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  isSignInWithEmailLink,\n  signInWithEmailLink,\n  signInWithCustomToken,\n  sendPasswordResetEmail,\n  useDeviceLanguage,\n  verifyPasswordResetCode,\n  connectAuthEmulator,\n  fetchSignInMethodsForEmail,\n  sendEmailVerification,\n  verifyBeforeUpdateEmail,\n  confirmPasswordReset,\n  updateEmail,\n  updatePassword,\n  updateProfile,\n  updatePhoneNumber,\n  signInWithCredential,\n  unlink,\n  linkWithCredential,\n  reauthenticateWithCredential,\n  getIdToken,\n  getIdTokenResult,\n  applyActionCode,\n  checkActionCode,\n  EmailAuthProvider,\n  FacebookAuthProvider,\n  GoogleAuthProvider,\n  TwitterAuthProvider,\n  GithubAuthProvider,\n  PhoneAuthProvider,\n  OAuthProvider,\n} from '@react-native-firebase/app/lib/internal/web/firebaseAuth';\nimport { guard, getWebError, emitEvent } from '@react-native-firebase/app/lib/internal/web/utils';\nimport {\n  getReactNativeAsyncStorageInternal,\n  isMemoryStorage,\n} from '@react-native-firebase/app/lib/internal/asyncStorage';\n\n/**\n * Resolves or rejects an auth method promise without a user (user was missing).\n * @param {boolean} isError whether to reject the promise.\n * @returns {Promise<void>} - Void promise.\n */\nfunction promiseNoUser(isError = false) {\n  if (isError) {\n    return rejectPromiseWithCodeAndMessage('no-current-user', 'No user currently signed in.');\n  }\n\n  // TODO(ehesp): Should this be null, or undefined?\n  return Promise.resolve(null);\n}\n\n/**\n * Returns a structured error object.\n * @param {string} code - The error code.\n * @param {string} message - The error message.\n */\nfunction rejectPromiseWithCodeAndMessage(code, message) {\n  return rejectPromise(getWebError({ code: `auth/${code}`, message }));\n}\n\n/**\n * Returns a structured error object.\n * @param {error} error The error object.\n * @returns {never}\n */\nfunction rejectPromise(error) {\n  const { code, message, details } = error;\n  const nativeError = {\n    code,\n    message,\n    userInfo: {\n      code: code ? code.replace('auth/', '') : 'unknown',\n      message,\n      details,\n    },\n  };\n  return Promise.reject(nativeError);\n}\n\n/**\n * Converts a user object to a plain object.\n * @param {User} user - The User object to convert.\n * @returns {object}\n */\nfunction userToObject(user) {\n  return {\n    ...userInfoToObject(user),\n    emailVerified: user.emailVerified,\n    isAnonymous: user.isAnonymous,\n    tenantId: user.tenantId !== null && user.tenantId !== '' ? user.tenantId : null,\n    providerData: user.providerData.map(userInfoToObject),\n    metadata: userMetadataToObject(user.metadata),\n    multiFactor: multiFactor(user).enrolledFactors.map(multiFactorInfoToObject),\n  };\n}\n\n/**\n * Returns an AuthCredential object for the given provider.\n * @param {Auth} auth - The Auth instance to use.\n * @param {string} provider - The provider to get the credential for.\n * @param {string} token - The token to use for the credential.\n * @param {string|null} secret - The secret to use for the credential.\n * @returns {AuthCredential|null} - The AuthCredential object.\n */\nfunction getAuthCredential(_auth, provider, token, secret) {\n  if (provider.startsWith('oidc.')) {\n    return new OAuthProvider(provider).credential({\n      idToken: token,\n    });\n  }\n\n  switch (provider) {\n    case 'facebook.com':\n      return FacebookAuthProvider().credential(token);\n    case 'google.com':\n      return GoogleAuthProvider().credential(token, secret);\n    case 'twitter.com':\n      return TwitterAuthProvider().credential(token, secret);\n    case 'github.com':\n      return GithubAuthProvider().credential(token);\n    case 'apple.com':\n      return new OAuthProvider(provider).credential({\n        idToken: token,\n        rawNonce: secret,\n      });\n    case 'oauth':\n      return OAuthProvider(provider).credential({\n        idToken: token,\n        accessToken: secret,\n      });\n    case 'phone':\n      return PhoneAuthProvider.credential(token, secret);\n    case 'password':\n      return EmailAuthProvider.credential(token, secret);\n    case 'emailLink':\n      return EmailAuthProvider.credentialWithLink(token, secret);\n    default:\n      return null;\n  }\n}\n\n/**\n * Converts a user info object to a plain object.\n * @param {UserInfo} userInfo - The UserInfo object to convert.\n */\nfunction userInfoToObject(userInfo) {\n  return {\n    providerId: userInfo.providerId,\n    uid: userInfo.uid,\n    displayName:\n      userInfo.displayName !== null && userInfo.displayName !== '' ? userInfo.displayName : null,\n    email: userInfo.email !== null && userInfo.email !== '' ? userInfo.email : null,\n    photoURL: userInfo.photoURL !== null && userInfo.photoURL !== '' ? userInfo.photoURL : null,\n    phoneNumber:\n      userInfo.phoneNumber !== null && userInfo.phoneNumber !== '' ? userInfo.phoneNumber : null,\n  };\n}\n\n/**\n * Converts a user metadata object to a plain object.\n * @param {UserMetadata} metadata - The UserMetadata object to convert.\n */\nfunction userMetadataToObject(metadata) {\n  return {\n    creationTime: metadata.creationTime ? new Date(metadata.creationTime).toISOString() : null,\n    lastSignInTime: metadata.lastSignInTime\n      ? new Date(metadata.lastSignInTime).toISOString()\n      : null,\n  };\n}\n\n/**\n * Converts a MultiFactorInfo object to a plain object.\n * @param {MultiFactorInfo} multiFactorInfo - The MultiFactorInfo object to convert.\n */\nfunction multiFactorInfoToObject(multiFactorInfo) {\n  const obj = {\n    displayName: multiFactorInfo.displayName,\n    enrollmentTime: multiFactorInfo.enrollmentTime,\n    factorId: multiFactorInfo.factorId,\n    uid: multiFactorInfo.uid,\n  };\n\n  // If https://firebase.google.com/docs/reference/js/auth.phonemultifactorinfo\n  if ('phoneNumber' in multiFactorInfo) {\n    obj.phoneNumber = multiFactorInfo.phoneNumber;\n  }\n\n  return obj;\n}\n\n/**\n * Converts a user credential object to a plain object.\n * @param {UserCredential} userCredential - The user credential object to convert.\n */\nfunction authResultToObject(userCredential) {\n  const additional = getAdditionalUserInfo(userCredential);\n  return {\n    user: userToObject(userCredential.user),\n    additionalUserInfo: {\n      isNewUser: additional.isNewUser,\n      profile: additional.profile,\n      providerId: additional.providerId,\n      username: additional.username,\n    },\n  };\n}\n\nconst instances = {};\nconst authStateListeners = {};\nconst idTokenListeners = {};\nconst sessionMap = new Map();\nlet sessionId = 0;\n\n// Returns a cached Firestore instance.\nfunction getCachedAuthInstance(appName) {\n  if (!instances[appName]) {\n    if (!isMemoryStorage()) {\n      // Warn auth persistence is is disabled unless Async Storage implementation is provided.\n      // eslint-disable-next-line no-console\n      console.warn(\n        'Firebase Auth persistence is disabled. To enable persistence, provide an Async Storage implementation.\\n' +\n          '\\n' +\n          'For example, to use React Native Async Storage:\\n' +\n          '\\n' +\n          \"  import AsyncStorage from '@react-native-async-storage/async-storage';\\n\" +\n          '\\n' +\n          '  // Before initializing Firebase set the Async Storage implementation\\n' +\n          '  // that will be used to persist user sessions.\\n' +\n          '  firebase.setReactNativeAsyncStorage(AsyncStorage);\\n' +\n          '\\n' +\n          '  // Then initialize Firebase as normal.\\n' +\n          '  await firebase.initializeApp({ ... });\\n',\n      );\n    }\n    instances[appName] = initializeAuth(getApp(appName), {\n      persistence: getReactNativePersistence(getReactNativeAsyncStorageInternal()),\n    });\n  }\n  return instances[appName];\n}\n\n// getConstants\nconst CONSTANTS = {\n  APP_LANGUAGE: {},\n  APP_USER: {},\n};\n\n// Not required for web, since it's dynamic initialization\n// and we are not making instances of auth based on apps that already exist\n// since there are none that exist before we initialize them in our code below.\n// for (const appName of getApps()) {\n//   const instance = getAuth(getApp(appName));\n//   CONSTANTS.APP_LANGUAGE[appName] = instance.languageCode;\n//   if (instance.currentUser) {\n//     CONSTANTS.APP_USER[appName] = userToObject(instance.currentUser);\n//   }\n// }\n\n/**\n * This is a 'NativeModule' for the web platform.\n * Methods here are identical to the ones found in\n * the native android/ios modules e.g. `@ReactMethod` annotated\n * java methods on Android.\n */\nexport default {\n  // Expose all the constants.\n  ...CONSTANTS,\n\n  async useUserAccessGroup() {\n    // noop\n  },\n\n  configureAuthDomain() {\n    return rejectPromiseWithCodeAndMessage(\n      'unsupported',\n      'This operation is not supported in this environment.',\n    );\n  },\n\n  async getCustomAuthDomain() {\n    return rejectPromiseWithCodeAndMessage(\n      'unsupported',\n      'This operation is not supported in this environment.',\n    );\n  },\n\n  /**\n   * Create a new auth state listener instance for a given app.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @returns {Promise<void>} - Void promise.\n   */\n  addAuthStateListener(appName) {\n    if (authStateListeners[appName]) {\n      return;\n    }\n\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n\n      authStateListeners[appName] = onAuthStateChanged(auth, user => {\n        emitEvent('auth_state_changed', {\n          appName,\n          user: user ? userToObject(user) : null,\n        });\n      });\n    });\n  },\n\n  /**\n   * Remove an auth state listener instance for a given app.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @returns {Promise<void>} - Void promise.\n   */\n  removeAuthStateListener(appName) {\n    if (authStateListeners[appName]) {\n      authStateListeners[appName]();\n      delete authStateListeners[appName];\n    }\n  },\n\n  /**\n   * Create a new ID token listener instance for a given app.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @returns {Promise<void>} - Void promise.\n   */\n  addIdTokenListener(appName) {\n    if (idTokenListeners[appName]) {\n      return;\n    }\n\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n\n      idTokenListeners[appName] = onIdTokenChanged(auth, user => {\n        emitEvent('auth_id_token_changed', {\n          authenticated: !!user,\n          appName,\n          user: user ? userToObject(user) : null,\n        });\n      });\n    });\n  },\n\n  /**\n   * Remove an ID token listener instance for a given app.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @returns {Promise<void>} - Void promise.\n   */\n  removeIdTokenListener(appName) {\n    if (idTokenListeners[appName]) {\n      idTokenListeners[appName]();\n      delete idTokenListeners[appName];\n    }\n  },\n\n  async forceRecaptchaFlowForTesting() {\n    return rejectPromiseWithCodeAndMessage(\n      'unsupported',\n      'This operation is not supported in this environment.',\n    );\n  },\n\n  async setAutoRetrievedSmsCodeForPhoneNumber() {\n    return rejectPromiseWithCodeAndMessage(\n      'unsupported',\n      'This operation is not supported in this environment.',\n    );\n  },\n\n  async setAppVerificationDisabledForTesting() {\n    return rejectPromiseWithCodeAndMessage(\n      'unsupported',\n      'This operation is not supported in this environment.',\n    );\n  },\n\n  /**\n   * Sign out the current user.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @returns {Promise<void>} - Void promise.\n   */\n  signOut(appName) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n\n      if (auth.currentUser === null) {\n        return promiseNoUser(true);\n      }\n\n      await auth.signOut();\n      return promiseNoUser();\n    });\n  },\n\n  /**\n   * Sign in anonymously.\n   * @param {*} appName - The name of the app to get the auth instance for.\n   * @returns\n   */\n  signInAnonymously(appName) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n      const credential = await signInAnonymously(auth);\n      return authResultToObject(credential);\n    });\n  },\n\n  /**\n   * Sign in with email and password.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @param {string} email - The email to sign in with.\n   * @param {string} password - The password to sign in with.\n   * @returns {Promise<object>} - The result of the sign in.\n   */\n  async createUserWithEmailAndPassword(appName, email, password) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n      const credential = await createUserWithEmailAndPassword(auth, email, password);\n      return authResultToObject(credential);\n    });\n  },\n\n  /**\n   * Sign in with email and password.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @param {string} email - The email to sign in with.\n   * @param {string} password - The password to sign in with.\n   * @returns {Promise<object>} - The result of the sign in.\n   */\n  async signInWithEmailAndPassword(appName, email, password) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n      const credential = await signInWithEmailAndPassword(auth, email, password);\n      return authResultToObject(credential);\n    });\n  },\n\n  /**\n   * Check if a sign in with email link is valid\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @param {string} emailLink - The email link to sign in with.\n   * @returns {Promise<boolean>} - Whether the link is a valid sign in with email link.\n   */\n  async isSignInWithEmailLink(appName, emailLink) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n      return await isSignInWithEmailLink(auth, emailLink);\n    });\n  },\n\n  /**\n   * Sign in with email link.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @param {string} email - The email to sign in with.\n   * @param {string} emailLink - The email link to sign in with.\n   * @returns {Promise<object>} - The result of the sign in.\n   */\n  async signInWithEmailLink(appName, email, emailLink) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n      const credential = await signInWithEmailLink(auth, email, emailLink);\n      return authResultToObject(credential);\n    });\n  },\n\n  /**\n   * Sign in with a custom token.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @param {string} token - The token to sign in with.\n   * @returns {Promise<object>} - The result of the sign in.\n   */\n  async signInWithCustomToken(appName, token) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n      const credential = await signInWithCustomToken(auth, token);\n      return authResultToObject(credential);\n    });\n  },\n\n  /**\n   * Not implemented on web.\n   */\n  async revokeToken() {\n    return promiseNoUser();\n  },\n\n  /**\n   * Send a password reset email.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @param {string} email - The email to send the password reset email to.\n   * @param {ActionCodeSettings} settings - The settings to use for the password reset email.\n   * @returns {Promise<null>}\n   */\n  async sendPasswordResetEmail(appName, email, settings) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n      await sendPasswordResetEmail(auth, email, settings);\n      return promiseNoUser();\n    });\n  },\n\n  /**\n   * Send a sign in link to an email.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @param {string} email - The email to send the password reset email to.\n   * @param {ActionCodeSettings} settings - The settings to use for the password reset email.\n   * @returns {Promise<null>}\n   */\n  async sendSignInLinkToEmail(appName, email, settings) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n      await sendSignInLinkToEmail(auth, email, settings);\n      return promiseNoUser();\n    });\n  },\n\n  /* ----------------------\n   *  .currentUser methods\n   * ---------------------- */\n\n  /**\n   * Delete the current user.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @returns {Promise<null>}\n   */\n  async delete(appName) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n\n      if (auth.currentUser === null) {\n        return promiseNoUser(true);\n      }\n\n      await auth.currentUser.delete();\n      return promiseNoUser();\n    });\n  },\n\n  /**\n   * Reload the current user.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @returns {Promise<object>} - The current user object.\n   */\n  async reload(appName) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n\n      if (auth.currentUser === null) {\n        return promiseNoUser(true);\n      }\n\n      await auth.currentUser.reload();\n      return userToObject(auth.currentUser);\n    });\n  },\n\n  /**\n   * Send a verification email to the current user.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @param {ActionCodeSettings} actionCodeSettings - The settings to use for the email verification.\n   * @returns {Promise<object>} - The current user object.\n   */\n  async sendEmailVerification(appName, actionCodeSettings) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n\n      if (auth.currentUser === null) {\n        return promiseNoUser(true);\n      }\n\n      await sendEmailVerification(auth.currentUser, actionCodeSettings);\n      return userToObject(auth.currentUser);\n    });\n  },\n\n  /**\n   * Verify the email before updating it.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @param {string} email - The email to verify.\n   * @param {ActionCodeSettings} actionCodeSettings - The settings to use for the email verification.\n   * @returns {Promise<object>} - The current user object.\n   */\n  async verifyBeforeUpdateEmail(appName, email, actionCodeSettings) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n\n      if (auth.currentUser === null) {\n        return promiseNoUser(true);\n      }\n\n      await verifyBeforeUpdateEmail(auth.currentUser, email, actionCodeSettings);\n      return userToObject(auth.currentUser);\n    });\n  },\n\n  /**\n   * Update the current user's email.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @param {string} email - The email to update.\n   * @returns {Promise<object>} - The current user object.\n   */\n  async updateEmail(appName, email) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n\n      if (auth.currentUser === null) {\n        return promiseNoUser(true);\n      }\n\n      await updateEmail(auth.currentUser, email);\n      return userToObject(auth.currentUser);\n    });\n  },\n\n  /**\n   * Update the current user's password.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @param {string} password - The password to update.\n   * @returns {Promise<object>} - The current user object.\n   */\n  async updatePassword(appName, password) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n\n      if (auth.currentUser === null) {\n        return promiseNoUser(true);\n      }\n\n      await updatePassword(auth.currentUser, password);\n      return userToObject(auth.currentUser);\n    });\n  },\n\n  /**\n   * Update the current user's phone number.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @param {string} provider - The provider to update the phone number with.\n   * @param {string} authToken - The auth token to update the phone number with.\n   * @param {string} authSecret - The auth secret to update the phone number with.\n   * @returns {Promise<object>} - The current user object.\n   */\n  async updatePhoneNumber(appName, provider, authToken, authSecret) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n\n      if (auth.currentUser === null) {\n        return promiseNoUser(true);\n      }\n\n      if (provider !== 'phone') {\n        return rejectPromiseWithCodeAndMessage(\n          'invalid-credential',\n          'The supplied auth credential does not have a phone provider.',\n        );\n      }\n\n      const credential = getAuthCredential(auth, provider, authToken, authSecret);\n\n      if (!credential) {\n        return rejectPromiseWithCodeAndMessage(\n          'invalid-credential',\n          'The supplied auth credential is malformed, has expired or is not currently supported.',\n        );\n      }\n\n      await updatePhoneNumber(auth.currentUser, credential);\n\n      return userToObject(auth.currentUser);\n    });\n  },\n\n  /**\n   * Update the current user's profile.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @param {object} props - The properties to update.\n   * @returns {Promise<object>} - The current user object.\n   */\n  async updateProfile(appName, props) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n\n      if (auth.currentUser === null) {\n        return promiseNoUser(true);\n      }\n\n      await updateProfile(auth.currentUser, {\n        displayName: props.displayName,\n        photoURL: props.photoURL,\n      });\n\n      return userToObject(auth.currentUser);\n    });\n  },\n\n  /**\n   * Sign in with a credential.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @param {string} provider - The provider to sign in with.\n   * @param {string} authToken - The auth token to sign in with.\n   * @param {string} authSecret - The auth secret to sign in with.\n   * @returns {Promise<object>} - The result of the sign in.\n   */\n  async signInWithCredential(appName, provider, authToken, authSecret) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n      const credential = getAuthCredential(auth, provider, authToken, authSecret);\n\n      if (credential === null) {\n        return rejectPromiseWithCodeAndMessage(\n          'invalid-credential',\n          'The supplied auth credential is malformed, has expired or is not currently supported.',\n        );\n      }\n\n      const credentialResult = await signInWithCredential(auth, credential);\n      return authResultToObject(credentialResult);\n    });\n  },\n\n  async signInWithProvider() {\n    return rejectPromiseWithCodeAndMessage(\n      'unsupported',\n      'This operation is not supported in this environment.',\n    );\n  },\n\n  async signInWithPhoneNumber() {\n    return rejectPromiseWithCodeAndMessage(\n      'unsupported',\n      'This operation is not supported in this environment.',\n    );\n  },\n\n  /**\n   * Get a multi-factor session.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @returns {Promise<string>} - The session ID.\n   */\n  async getSession(appName) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n\n      if (auth.currentUser === null) {\n        return promiseNoUser(true);\n      }\n\n      const session = await multiFactor(auth.currentUser).getSession();\n\n      // Increment the session ID.\n      sessionId++;\n\n      const key = `${sessionId}`;\n      sessionMap.set(key, session);\n      return key;\n    });\n  },\n\n  verifyPhoneNumberForMultiFactor() {\n    return rejectPromiseWithCodeAndMessage(\n      'unsupported',\n      'This operation is not supported in this environment.',\n    );\n  },\n\n  finalizeMultiFactorEnrollment() {\n    return rejectPromiseWithCodeAndMessage(\n      'unsupported',\n      'This operation is not supported in this environment.',\n    );\n  },\n\n  resolveMultiFactorSignIn() {\n    return rejectPromiseWithCodeAndMessage(\n      'unsupported',\n      'This operation is not supported in this environment.',\n    );\n  },\n\n  confirmationResultConfirm() {\n    return rejectPromiseWithCodeAndMessage(\n      'unsupported',\n      'This operation is not supported in this environment.',\n    );\n  },\n\n  verifyPhoneNumber() {\n    return rejectPromiseWithCodeAndMessage(\n      'unsupported',\n      'This operation is not supported in this environment.',\n    );\n  },\n\n  /**\n   * Confirm the password reset code.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @param {string} code - The code to confirm.\n   * @param {string} newPassword - The new password to set.\n   * @returns {Promise<null>}\n   */\n  async confirmPasswordReset(appName, code, newPassword) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n      await confirmPasswordReset(auth, code, newPassword);\n      return promiseNoUser();\n    });\n  },\n\n  /**\n   * Apply an action code.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @param {string} code - The code to apply.\n   * @returns {Promise<void>} - Void promise.\n   */\n  async applyActionCode(appName, code) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n      await applyActionCode(auth, code);\n    });\n  },\n\n  /**\n   * Check an action code.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @param {string} code - The code to check.\n   * @returns {Promise<object>} - The result of the check.\n   */\n  async checkActionCode(appName, code) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n      const result = await checkActionCode(auth, code);\n\n      return {\n        operation: result.operation,\n        data: {\n          email: result.data.email,\n          fromEmail: result.data.previousEmail,\n          // multiFactorInfo - not implemented\n        },\n      };\n    });\n  },\n\n  /**\n   * Link a credential to the current user.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @param {string} provider - The provider to link.\n   * @param {string} authToken - The auth token to link.\n   * @param {string} authSecret - The auth secret to link.\n   * @returns {Promise<object>} - The current user object.\n   */\n  async linkWithCredential(appName, provider, authToken, authSecret) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n      const credential = getAuthCredential(auth, provider, authToken, authSecret);\n\n      if (credential === null) {\n        return rejectPromiseWithCodeAndMessage(\n          'invalid-credential',\n          'The supplied auth credential is malformed, has expired or is not currently supported.',\n        );\n      }\n\n      if (auth.currentUser === null) {\n        return promiseNoUser(true);\n      }\n\n      return authResultToObject(await linkWithCredential(auth.currentUser, credential));\n    });\n  },\n\n  async linkWithProvider() {\n    // TODO: We could check if window is available here, but for now it's not supported.\n    return rejectPromiseWithCodeAndMessage(\n      'unsupported',\n      'This operation is not supported in this environment.',\n    );\n  },\n\n  /**\n   * Unlink a provider from the current user.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @param {string} providerId - The provider ID to unlink.\n   * @returns {Promise<object>} - The current user object.\n   */\n  async unlink(appName, providerId) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n\n      if (auth.currentUser === null) {\n        return promiseNoUser(true);\n      }\n\n      const user = await unlink(auth.currentUser, providerId);\n      return userToObject(user);\n    });\n  },\n\n  /**\n   * Reauthenticate with a credential.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @param {string} provider - The provider to reauthenticate with.\n   * @param {string} authToken - The auth token to reauthenticate with.\n   * @param {string} authSecret - The auth secret to reauthenticate with.\n   * @returns {Promise<object>} - The current user object.\n   */\n  async reauthenticateWithCredential(appName, provider, authToken, authSecret) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n      const credential = getAuthCredential(auth, provider, authToken, authSecret);\n\n      if (credential === null) {\n        return rejectPromiseWithCodeAndMessage(\n          'invalid-credential',\n          'The supplied auth credential is malformed, has expired or is not currently supported.',\n        );\n      }\n\n      if (auth.currentUser === null) {\n        return promiseNoUser(true);\n      }\n\n      return authResultToObject(await reauthenticateWithCredential(auth.currentUser, credential));\n    });\n  },\n\n  async reauthenticateWithProvider() {\n    // TODO: We could check if window is available here, but for now it's not supported.\n    return rejectPromiseWithCodeAndMessage(\n      'unsupported',\n      'This operation is not supported in this environment.',\n    );\n  },\n\n  /**\n   * Get the ID token for the current user.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @param {boolean} forceRefresh - Whether to force a token refresh.\n   * @returns {Promise<string>} - The ID token.\n   */\n  async getIdToken(appName, forceRefresh) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n\n      if (auth.currentUser === null) {\n        return promiseNoUser(true);\n      }\n\n      const token = await getIdToken(auth.currentUser, forceRefresh);\n      return token;\n    });\n  },\n\n  /**\n   * Get the ID token result for the current user.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @param {boolean} forceRefresh - Whether to force a token refresh.\n   * @returns {Promise<object>} - The ID token result.\n   */\n  async getIdTokenResult(appName, forceRefresh) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n\n      if (auth.currentUser === null) {\n        return promiseNoUser(true);\n      }\n\n      const result = await getIdTokenResult(auth.currentUser, forceRefresh);\n\n      // TODO(ehesp): Result looks expected, might be safer to keep fixed object?\n      return {\n        authTime: result.authTime,\n        expirationTime: result.expirationTime,\n        issuedAtTime: result.issuedAtTime,\n        claims: result.claims,\n        signInProvider: result.signInProvider,\n        token: result.token,\n      };\n    });\n  },\n\n  /* ----------------------\n   *  other methods\n   * ---------------------- */\n\n  /**\n   * Fetch the sign in methods for an email.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @param {string} email - The email to fetch the sign in methods for.\n   * @returns {Promise<string[]>} - The sign in methods for the email.\n   */\n  async fetchSignInMethodsForEmail(appName, email) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n      const methods = await fetchSignInMethodsForEmail(auth, email);\n      return methods;\n    });\n  },\n\n  /**\n   * Set the language code.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @param {string} code - The language code to set.\n   * @returns {void}\n   */\n  setLanguageCode(appName, code) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n      auth.languageCode = code;\n    });\n  },\n\n  /**\n   * Set the tenant ID.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @param {string} tenantId - The tenant ID to set.\n   * @returns {void}\n   */\n  setTenantId(appName, tenantId) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n      auth.tenantId = tenantId;\n    });\n  },\n\n  /**\n   * Use the device language.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @returns void\n   */\n  useDeviceLanguage(appName) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n      useDeviceLanguage(auth);\n    });\n  },\n\n  /**\n   * Verify the provided password reset code.\n   * @returns {string} - The users email address if valid.\n   */\n  verifyPasswordResetCode(appName, code) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n      const email = await verifyPasswordResetCode(auth, code);\n      return email;\n    });\n  },\n\n  /**\n   * Connect to the auth emulator.\n   * @param {string} appName - The name of the app to get the auth instance for.\n   * @param {string} host - The host to use for the auth emulator.\n   * @param {number} port - The port to use for the auth emulator.\n   * @returns {void}\n   */\n  useEmulator(appName, host, port) {\n    return guard(async () => {\n      const auth = getCachedAuthInstance(appName);\n      connectAuthEmulator(auth, `http://${host}:${port}`);\n    });\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}