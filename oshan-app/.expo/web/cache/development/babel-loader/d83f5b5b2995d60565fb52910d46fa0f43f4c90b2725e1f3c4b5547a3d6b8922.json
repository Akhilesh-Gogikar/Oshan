{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport * as Google from 'expo-auth-session/providers/google';\nimport * as WebBrowser from 'expo-web-browser';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport backendApi from './apiService';\nWebBrowser.maybeCompleteAuthSession();\nvar ANDROID_CLIENT_ID = process.env.EXPO_PUBLIC_ANDROID_CLIENT_ID;\nvar IOS_CLIENT_ID = process.env.EXPO_PUBLIC_IOS_CLIENT_ID;\nvar WEB_CLIENT_ID = process.env.EXPO_PUBLIC_WEB_CLIENT_ID;\nexport var signInWithGoogle = function () {\n  var _ref = _asyncToGenerator(function* () {\n    try {\n      var _Google$useAuthReques = Google.useAuthRequest({\n          androidClientId: ANDROID_CLIENT_ID,\n          iosClientId: IOS_CLIENT_ID,\n          webClientId: WEB_CLIENT_ID,\n          scopes: ['profile', 'email']\n        }),\n        _Google$useAuthReques2 = _slicedToArray(_Google$useAuthReques, 3),\n        request = _Google$useAuthReques2[0],\n        response = _Google$useAuthReques2[1],\n        promptAsync = _Google$useAuthReques2[2];\n      var result = yield promptAsync();\n      if (result.type === 'success') {\n        var _result$authenticatio;\n        var idToken = (_result$authenticatio = result.authentication) == null ? void 0 : _result$authenticatio.idToken;\n        if (idToken) {\n          var backendResponse = yield backendApi.post('/auth/google', {\n            idToken: idToken\n          });\n          var _backendResponse$data = backendResponse.data,\n            token = _backendResponse$data.token,\n            userId = _backendResponse$data.userId;\n          yield AsyncStorage.setItem('userToken', token);\n          yield AsyncStorage.setItem('userId', userId);\n          console.log('User signed in. JWT stored.');\n          return {\n            success: true,\n            token: token,\n            userId: userId\n          };\n        }\n      }\n      return {\n        success: false,\n        error: 'Google Sign-In failed or was cancelled.'\n      };\n    } catch (error) {\n      console.error('Google Sign-In Error:', error);\n      return {\n        success: false,\n        error: error.message || 'An unknown error occurred during sign-in.'\n      };\n    }\n  });\n  return function signInWithGoogle() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var signOut = function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    try {\n      yield AsyncStorage.removeItem('userToken');\n      yield AsyncStorage.removeItem('userId');\n      console.log('User signed out.');\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Sign Out Error:', error);\n      return {\n        success: false,\n        error: error.message || 'An unknown error occurred during sign-out.'\n      };\n    }\n  });\n  return function signOut() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getStoredAuthData = function () {\n  var _ref3 = _asyncToGenerator(function* () {\n    try {\n      var userToken = yield AsyncStorage.getItem('userToken');\n      var userId = yield AsyncStorage.getItem('userId');\n      return {\n        userToken: userToken,\n        userId: userId\n      };\n    } catch (error) {\n      console.error('Error getting stored auth data:', error);\n      return {\n        userToken: null,\n        userId: null\n      };\n    }\n  });\n  return function getStoredAuthData() {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["Google","WebBrowser","AsyncStorage","backendApi","maybeCompleteAuthSession","ANDROID_CLIENT_ID","process","env","EXPO_PUBLIC_ANDROID_CLIENT_ID","IOS_CLIENT_ID","EXPO_PUBLIC_IOS_CLIENT_ID","WEB_CLIENT_ID","EXPO_PUBLIC_WEB_CLIENT_ID","signInWithGoogle","_ref","_asyncToGenerator","_Google$useAuthReques","useAuthRequest","androidClientId","iosClientId","webClientId","scopes","_Google$useAuthReques2","_slicedToArray","request","response","promptAsync","result","type","_result$authenticatio","idToken","authentication","backendResponse","post","_backendResponse$data","data","token","userId","setItem","console","log","success","error","message","apply","arguments","signOut","_ref2","removeItem","getStoredAuthData","_ref3","userToken","getItem"],"sources":["/Users/akhileshgogikar/Oshan/oshan-app/src/services/authService.ts"],"sourcesContent":["import * as Google from 'expo-auth-session/providers/google';\nimport * as WebBrowser from 'expo-web-browser';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport backendApi from './apiService'; // Assuming you have an apiService for backend calls\n\nWebBrowser.maybeCompleteAuthSession();\n\n// Hardcode client ID for demonstration. In a real app, use environment variables.\nconst ANDROID_CLIENT_ID = process.env.EXPO_PUBLIC_ANDROID_CLIENT_ID;\nconst IOS_CLIENT_ID = process.env.EXPO_PUBLIC_IOS_CLIENT_ID;\nconst WEB_CLIENT_ID = process.env.EXPO_PUBLIC_WEB_CLIENT_ID;\n\nexport const signInWithGoogle = async () => {\n  try {\n    const [request, response, promptAsync] = Google.useAuthRequest({\n      androidClientId: ANDROID_CLIENT_ID,\n      iosClientId: IOS_CLIENT_ID,\n      webClientId: WEB_CLIENT_ID,\n      scopes: ['profile', 'email'],\n    });\n\n    // You would typically call promptAsync from a button press\n    // For now, let's assume it's called somewhere higher up or triggered programmatically.\n    // This is a simplified example. In a real application, you'd manage the auth flow more robustly.\n    const result = await promptAsync();\n\n    if (result.type === 'success') {\n      // Safely access id_token from the authentication result\n      const idToken = result.authentication?.idToken;\n\n      if (idToken) {\n        // Send idToken to your backend for verification and JWT issuance\n        const backendResponse = await backendApi.post('/auth/google', { idToken: idToken });\n        const { token, userId } = backendResponse.data; // Assuming your backend returns a JWT and user ID\n\n        await AsyncStorage.setItem('userToken', token);\n        await AsyncStorage.setItem('userId', userId); // Store user ID for backend calls\n\n        console.log('User signed in. JWT stored.');\n        return { success: true, token, userId };\n      }\n    }\n    return { success: false, error: 'Google Sign-In failed or was cancelled.' };\n  } catch (error) {\n    console.error('Google Sign-In Error:', error);\n    // Type assertion for error to access its message property\n    return { success: false, error: (error as Error).message || 'An unknown error occurred during sign-in.' };\n  }\n};\n\nexport const signOut = async () => {\n  try {\n    await AsyncStorage.removeItem('userToken');\n    await AsyncStorage.removeItem('userId'); // Remove user ID on sign out\n    console.log('User signed out.');\n    return { success: true };\n  } catch (error) {\n    console.error('Sign Out Error:', error);\n    // Type assertion for error to access its message property\n    return { success: false, error: (error as Error).message || 'An unknown error occurred during sign-out.' };\n  }\n};\n\nexport const getStoredAuthData = async () => {\n  try {\n    const userToken = await AsyncStorage.getItem('userToken');\n    const userId = await AsyncStorage.getItem('userId');\n    return { userToken, userId };\n  } catch (error) {\n    console.error('Error getting stored auth data:', error);\n    return { userToken: null, userId : null };\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}