{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport var stockApi = createApi({\n  reducerPath: 'stockApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://api.oshan.com/v1/',\n    prepareHeaders: function prepareHeaders(headers) {\n      headers.set('Content-Type', 'application/json');\n      return headers;\n    }\n  }),\n  tagTypes: ['Stock', 'Insights', 'News'],\n  endpoints: function endpoints(builder) {\n    return {\n      getStocks: builder.query({\n        query: function query() {\n          return 'stocks';\n        },\n        providesTags: ['Stock']\n      }),\n      getStock: builder.query({\n        query: function query(id) {\n          return `stocks/${id}`;\n        },\n        providesTags: ['Stock']\n      }),\n      getInsights: builder.query({\n        query: function query() {\n          return 'insights';\n        },\n        providesTags: ['Insights']\n      }),\n      getInsightsByStock: builder.query({\n        query: function query(stockId) {\n          return `insights/stock/${stockId}`;\n        },\n        providesTags: ['Insights']\n      }),\n      getNews: builder.query({\n        query: function query() {\n          return 'news';\n        },\n        providesTags: ['News']\n      }),\n      getNewsByStock: builder.query({\n        query: function query(stockId) {\n          return `news/stock/${stockId}`;\n        },\n        providesTags: ['News']\n      })\n    };\n  }\n});\nvar useGetStocksQuery = stockApi.useGetStocksQuery,\n  useGetStockQuery = stockApi.useGetStockQuery,\n  useGetInsightsQuery = stockApi.useGetInsightsQuery,\n  useGetInsightsByStockQuery = stockApi.useGetInsightsByStockQuery,\n  useGetNewsQuery = stockApi.useGetNewsQuery,\n  useGetNewsByStockQuery = stockApi.useGetNewsByStockQuery;\nexport { useGetStocksQuery, useGetStockQuery, useGetInsightsQuery, useGetInsightsByStockQuery, useGetNewsQuery, useGetNewsByStockQuery };","map":{"version":3,"names":["createApi","fetchBaseQuery","stockApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","set","tagTypes","endpoints","builder","getStocks","query","providesTags","getStock","id","getInsights","getInsightsByStock","stockId","getNews","getNewsByStock","useGetStocksQuery","useGetStockQuery","useGetInsightsQuery","useGetInsightsByStockQuery","useGetNewsQuery","useGetNewsByStockQuery"],"sources":["/Users/akhileshgogikar/Oshan/oshan-app/src/services/stockApi.ts"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { Stock, AIInsight, NewsArticle } from '../types/models';\n\nexport const stockApi = createApi({\n  reducerPath: 'stockApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://api.oshan.com/v1/',\n    prepareHeaders: (headers) => {\n      headers.set('Content-Type', 'application/json');\n      return headers;\n    },\n  }),\n  tagTypes: ['Stock', 'Insights', 'News'],\n  endpoints: (builder) => ({\n    getStocks: builder.query<Stock[], void>({\n      query: () => 'stocks',\n      providesTags: ['Stock'],\n    }),\n    \n    getStock: builder.query<Stock, string>({\n      query: (id) => `stocks/${id}`,\n      providesTags: ['Stock'],\n    }),\n    \n    getInsights: builder.query<AIInsight[], void>({\n      query: () => 'insights',\n      providesTags: ['Insights'],\n    }),\n    \n    getInsightsByStock: builder.query<AIInsight[], string>({\n      query: (stockId) => `insights/stock/${stockId}`,\n      providesTags: ['Insights'],\n    }),\n    \n    getNews: builder.query<NewsArticle[], void>({\n      query: () => 'news',\n      providesTags: ['News'],\n    }),\n    \n    getNewsByStock: builder.query<NewsArticle[], string>({\n      query: (stockId) => `news/stock/${stockId}`,\n      providesTags: ['News'],\n    }),\n  }),\n});\n\nexport const {\n  useGetStocksQuery,\n  useGetStockQuery,\n  useGetInsightsQuery,\n  useGetInsightsByStockQuery,\n  useGetNewsQuery,\n  useGetNewsByStockQuery,\n} = stockApi;"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAGxE,OAAO,IAAMC,QAAQ,GAAGF,SAAS,CAAC;EAChCG,WAAW,EAAE,UAAU;EACvBC,SAAS,EAAEH,cAAc,CAAC;IACxBI,OAAO,EAAE,2BAA2B;IACpCC,cAAc,EAAE,SAAhBA,cAAcA,CAAGC,OAAO,EAAK;MAC3BA,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;MAC/C,OAAOD,OAAO;IAChB;EACF,CAAC,CAAC;EACFE,QAAQ,EAAE,CAAC,OAAO,EAAE,UAAU,EAAE,MAAM,CAAC;EACvCC,SAAS,EAAE,SAAXA,SAASA,CAAGC,OAAO;IAAA,OAAM;MACvBC,SAAS,EAAED,OAAO,CAACE,KAAK,CAAgB;QACtCA,KAAK,EAAE,SAAPA,KAAKA,CAAA;UAAA,OAAQ,QAAQ;QAAA;QACrBC,YAAY,EAAE,CAAC,OAAO;MACxB,CAAC,CAAC;MAEFC,QAAQ,EAAEJ,OAAO,CAACE,KAAK,CAAgB;QACrCA,KAAK,EAAE,SAAPA,KAAKA,CAAGG,EAAE;UAAA,OAAK,UAAUA,EAAE,EAAE;QAAA;QAC7BF,YAAY,EAAE,CAAC,OAAO;MACxB,CAAC,CAAC;MAEFG,WAAW,EAAEN,OAAO,CAACE,KAAK,CAAoB;QAC5CA,KAAK,EAAE,SAAPA,KAAKA,CAAA;UAAA,OAAQ,UAAU;QAAA;QACvBC,YAAY,EAAE,CAAC,UAAU;MAC3B,CAAC,CAAC;MAEFI,kBAAkB,EAAEP,OAAO,CAACE,KAAK,CAAsB;QACrDA,KAAK,EAAE,SAAPA,KAAKA,CAAGM,OAAO;UAAA,OAAK,kBAAkBA,OAAO,EAAE;QAAA;QAC/CL,YAAY,EAAE,CAAC,UAAU;MAC3B,CAAC,CAAC;MAEFM,OAAO,EAAET,OAAO,CAACE,KAAK,CAAsB;QAC1CA,KAAK,EAAE,SAAPA,KAAKA,CAAA;UAAA,OAAQ,MAAM;QAAA;QACnBC,YAAY,EAAE,CAAC,MAAM;MACvB,CAAC,CAAC;MAEFO,cAAc,EAAEV,OAAO,CAACE,KAAK,CAAwB;QACnDA,KAAK,EAAE,SAAPA,KAAKA,CAAGM,OAAO;UAAA,OAAK,cAAcA,OAAO,EAAE;QAAA;QAC3CL,YAAY,EAAE,CAAC,MAAM;MACvB,CAAC;IACH,CAAC;EAAA;AACH,CAAC,CAAC;AAEK,IACLQ,iBAAiB,GAMfpB,QAAQ,CANVoB,iBAAiB;EACjBC,gBAAgB,GAKdrB,QAAQ,CALVqB,gBAAgB;EAChBC,mBAAmB,GAIjBtB,QAAQ,CAJVsB,mBAAmB;EACnBC,0BAA0B,GAGxBvB,QAAQ,CAHVuB,0BAA0B;EAC1BC,eAAe,GAEbxB,QAAQ,CAFVwB,eAAe;EACfC,sBAAsB,GACpBzB,QAAQ,CADVyB,sBAAsB;AACX,SAAAL,iBAAA,EAAAC,gBAAA,EAAAC,mBAAA,EAAAC,0BAAA,EAAAC,eAAA,EAAAC,sBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}