{"ast":null,"code":"import { MODULAR_DEPRECATION_ARG } from '@react-native-firebase/app/lib/common';\nimport { deleteApp as deleteAppCompat, getApp as getAppCompat, getApps as getAppsCompat, initializeApp as initializeAppCompat, setLogLevel as setLogLevelCompat, setReactNativeAsyncStorage as setReactNativeAsyncStorageCompat } from '../internal';\nimport { setUserLogHandler } from '../internal/logger';\nimport sdkVersion from '../version';\nexport function deleteApp(app) {\n  return deleteAppCompat.call(null, app.name, app._nativeInitialized, MODULAR_DEPRECATION_ARG);\n}\nexport function registerVersion(libraryKeyOrName, version, variant) {\n  throw new Error('registerVersion is only supported on Web');\n}\nexport function onLog(logCallback, options) {\n  setUserLogHandler(logCallback, options);\n}\nexport function getApps() {\n  return getAppsCompat.call(null, MODULAR_DEPRECATION_ARG);\n}\nexport function initializeApp(options, name) {\n  return initializeAppCompat.call(null, options, name, MODULAR_DEPRECATION_ARG);\n}\nexport function getApp(name) {\n  return getAppCompat.call(null, name, MODULAR_DEPRECATION_ARG);\n}\nexport function setLogLevel(logLevel) {\n  return setLogLevelCompat.call(null, logLevel, MODULAR_DEPRECATION_ARG);\n}\nexport function setReactNativeAsyncStorage(asyncStorage) {\n  return setReactNativeAsyncStorageCompat.call(null, asyncStorage, MODULAR_DEPRECATION_ARG);\n}\nexport function metaGetAll() {\n  return NativeModules.RNFBAppModule.metaGetAll();\n}\nexport function jsonGetAll() {\n  return NativeModules.RNFBAppModule.jsonGetAll();\n}\nexport function preferencesClearAll() {\n  return NativeModules.RNFBAppModule.preferencesClearAll();\n}\nexport function preferencesGetAll() {\n  return NativeModules.RNFBAppModule.preferencesGetAll();\n}\nexport function preferencesSetBool(key, value) {\n  return NativeModules.RNFBAppModule.preferencesSetBool(key, value);\n}\nexport function preferencesSetString(key, value) {\n  return NativeModules.RNFBAppModule.preferencesSetString(key, value);\n}\nexport var SDK_VERSION = sdkVersion;","map":{"version":3,"names":["MODULAR_DEPRECATION_ARG","deleteApp","deleteAppCompat","getApp","getAppCompat","getApps","getAppsCompat","initializeApp","initializeAppCompat","setLogLevel","setLogLevelCompat","setReactNativeAsyncStorage","setReactNativeAsyncStorageCompat","setUserLogHandler","sdkVersion","app","call","name","_nativeInitialized","registerVersion","libraryKeyOrName","version","variant","Error","onLog","logCallback","options","logLevel","asyncStorage","metaGetAll","NativeModules","RNFBAppModule","jsonGetAll","preferencesClearAll","preferencesGetAll","preferencesSetBool","key","value","preferencesSetString","SDK_VERSION"],"sources":["/Users/akhileshgogikar/Oshan/oshan-app/node_modules/@react-native-firebase/app/lib/modular/index.js"],"sourcesContent":["import { MODULAR_DEPRECATION_ARG } from '@react-native-firebase/app/lib/common';\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  deleteApp as deleteAppCompat,\n  getApp as getAppCompat,\n  getApps as getAppsCompat,\n  initializeApp as initializeAppCompat,\n  setLogLevel as setLogLevelCompat,\n  setReactNativeAsyncStorage as setReactNativeAsyncStorageCompat,\n} from '../internal';\nimport { setUserLogHandler } from '../internal/logger';\nimport sdkVersion from '../version';\n\n/**\n * @typedef {import('..').ReactNativeFirebase.FirebaseApp} FirebaseApp\n * @typedef {import('..').ReactNativeFirebase.FirebaseAppOptions} FirebaseAppOptions\n * @typedef {import('..').ReactNativeFirebase.LogLevelString} LogLevelString\n * @typedef {import('../internal/logger').LogCallback} LogCallback\n * @typedef {import('../internal/logger').LogOptions} LogOptions\n */\n\n/**\n * Renders this app unusable and frees the resources of all associated services.\n * @param {FirebaseApp} app - The app to delete.\n * @returns {Promise<void>}\n */\nexport function deleteApp(app) {\n  return deleteAppCompat.call(null, app.name, app._nativeInitialized, MODULAR_DEPRECATION_ARG);\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n  @param {string} libraryKeyOrName - library name or key.\n  @param {string} version - library version.\n  @param {string | undefined} variant - library variant. Optional.\n * @returns {Promise<void>}\n */\nexport function registerVersion(libraryKeyOrName, version, variant) {\n  throw new Error('registerVersion is only supported on Web');\n}\n\n/**\n * Sets log handler for VertexAI only currently.\n * @param {LogCallback | null} logCallback - The callback function to handle logs.\n * @param {LogOptions} [options] - Optional settings for log handling.\n * @returns {void}\n */\nexport function onLog(logCallback, options) {\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Gets the list of all initialized apps.\n * @returns {FirebaseApp[]} - An array of all initialized Firebase apps.\n */\nexport function getApps() {\n  return getAppsCompat.call(null, MODULAR_DEPRECATION_ARG);\n}\n\n/**\n * Initializes a Firebase app with the provided options and name.\n * @param {FirebaseAppOptions} options - Options to configure the services used in the app.\n * @param {string} [name] - The optional name of the app to initialize ('[DEFAULT]' if omitted).\n * @returns {FirebaseApp} - The initialized Firebase app.\n */\nexport function initializeApp(options, name) {\n  return initializeAppCompat.call(null, options, name, MODULAR_DEPRECATION_ARG);\n}\n\n/**\n * Retrieves an instance of a Firebase app.\n * @param {string} [name] - The optional name of the app to return ('[DEFAULT]' if omitted).\n * @returns {FirebaseApp} - The requested Firebase app instance.\n */\nexport function getApp(name) {\n  return getAppCompat.call(null, name, MODULAR_DEPRECATION_ARG);\n}\n\n/**\n * Sets the log level across all Firebase SDKs.\n * @param {LogLevelString} logLevel - The log level to set ('debug', 'verbose', 'info', 'warn', 'error', 'silent').\n * @returns {void}\n */\nexport function setLogLevel(logLevel) {\n  return setLogLevelCompat.call(null, logLevel, MODULAR_DEPRECATION_ARG);\n}\n\n/**\n * The `AsyncStorage` implementation to use for persisting data on 'Other' platforms.\n * If not specified, in memory persistence is used.\n *\n * This is required if you want to persist things like Auth sessions, Analytics device IDs, etc.\n */\nexport function setReactNativeAsyncStorage(asyncStorage) {\n  return setReactNativeAsyncStorageCompat.call(null, asyncStorage, MODULAR_DEPRECATION_ARG);\n}\n\n/**\n * Gets react-native-firebase specific \"meta\" data from native Info.plist / AndroidManifest.xml\n * @returns map of key / value pairs containing native meta data\n */\nexport function metaGetAll() {\n  return NativeModules.RNFBAppModule.metaGetAll();\n}\n\n/**\n * Gets react-native-firebase specific \"firebase.json\" data\n * @returns map of key / value pairs containing native firebase.json constants\n */\nexport function jsonGetAll() {\n  return NativeModules.RNFBAppModule.jsonGetAll();\n}\n\n/**\n * Clears react-native-firebase specific native preferences\n * @returns Promise<void>\n */\nexport function preferencesClearAll() {\n  return NativeModules.RNFBAppModule.preferencesClearAll();\n}\n\n/**\n * Gets react-native-firebase specific native preferences\n * @returns map of key / value pairs containing native preferences data\n */\nexport function preferencesGetAll() {\n  return NativeModules.RNFBAppModule.preferencesGetAll();\n}\n\n/**\n * Sets react-native-firebase specific native boolean preference\n * @param key the name of the native preference to set\n * @param value the value of the native preference to set\n * @returns Promise<void>\n */\nexport function preferencesSetBool(key, value) {\n  return NativeModules.RNFBAppModule.preferencesSetBool(key, value);\n}\n\n/**\n * Sets react-native-firebase specific native string preference\n * @param key the name of the native preference to set\n * @param value the value of the native preference to set\n * @returns Promise<void>\n */\nexport function preferencesSetString(key, value) {\n  return NativeModules.RNFBAppModule.preferencesSetString(key, value);\n}\n\nexport const SDK_VERSION = sdkVersion;\n"],"mappings":"AAAA,SAASA,uBAAuB,QAAQ,uCAAuC;AAE/E,SACEC,SAAS,IAAIC,eAAe,EAC5BC,MAAM,IAAIC,YAAY,EACtBC,OAAO,IAAIC,aAAa,EACxBC,aAAa,IAAIC,mBAAmB,EACpCC,WAAW,IAAIC,iBAAiB,EAChCC,0BAA0B,IAAIC,gCAAgC,QACzD,aAAa;AACpB,SAASC,iBAAiB,QAAQ,oBAAoB;AACtD,OAAOC,UAAU,MAAM,YAAY;AAenC,OAAO,SAASb,SAASA,CAACc,GAAG,EAAE;EAC7B,OAAOb,eAAe,CAACc,IAAI,CAAC,IAAI,EAAED,GAAG,CAACE,IAAI,EAAEF,GAAG,CAACG,kBAAkB,EAAElB,uBAAuB,CAAC;AAC9F;AASA,OAAO,SAASmB,eAAeA,CAACC,gBAAgB,EAAEC,OAAO,EAAEC,OAAO,EAAE;EAClE,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC;AAC7D;AAQA,OAAO,SAASC,KAAKA,CAACC,WAAW,EAAEC,OAAO,EAAE;EAC1Cb,iBAAiB,CAACY,WAAW,EAAEC,OAAO,CAAC;AACzC;AAMA,OAAO,SAASrB,OAAOA,CAAA,EAAG;EACxB,OAAOC,aAAa,CAACU,IAAI,CAAC,IAAI,EAAEhB,uBAAuB,CAAC;AAC1D;AAQA,OAAO,SAASO,aAAaA,CAACmB,OAAO,EAAET,IAAI,EAAE;EAC3C,OAAOT,mBAAmB,CAACQ,IAAI,CAAC,IAAI,EAAEU,OAAO,EAAET,IAAI,EAAEjB,uBAAuB,CAAC;AAC/E;AAOA,OAAO,SAASG,MAAMA,CAACc,IAAI,EAAE;EAC3B,OAAOb,YAAY,CAACY,IAAI,CAAC,IAAI,EAAEC,IAAI,EAAEjB,uBAAuB,CAAC;AAC/D;AAOA,OAAO,SAASS,WAAWA,CAACkB,QAAQ,EAAE;EACpC,OAAOjB,iBAAiB,CAACM,IAAI,CAAC,IAAI,EAAEW,QAAQ,EAAE3B,uBAAuB,CAAC;AACxE;AAQA,OAAO,SAASW,0BAA0BA,CAACiB,YAAY,EAAE;EACvD,OAAOhB,gCAAgC,CAACI,IAAI,CAAC,IAAI,EAAEY,YAAY,EAAE5B,uBAAuB,CAAC;AAC3F;AAMA,OAAO,SAAS6B,UAAUA,CAAA,EAAG;EAC3B,OAAOC,aAAa,CAACC,aAAa,CAACF,UAAU,CAAC,CAAC;AACjD;AAMA,OAAO,SAASG,UAAUA,CAAA,EAAG;EAC3B,OAAOF,aAAa,CAACC,aAAa,CAACC,UAAU,CAAC,CAAC;AACjD;AAMA,OAAO,SAASC,mBAAmBA,CAAA,EAAG;EACpC,OAAOH,aAAa,CAACC,aAAa,CAACE,mBAAmB,CAAC,CAAC;AAC1D;AAMA,OAAO,SAASC,iBAAiBA,CAAA,EAAG;EAClC,OAAOJ,aAAa,CAACC,aAAa,CAACG,iBAAiB,CAAC,CAAC;AACxD;AAQA,OAAO,SAASC,kBAAkBA,CAACC,GAAG,EAAEC,KAAK,EAAE;EAC7C,OAAOP,aAAa,CAACC,aAAa,CAACI,kBAAkB,CAACC,GAAG,EAAEC,KAAK,CAAC;AACnE;AAQA,OAAO,SAASC,oBAAoBA,CAACF,GAAG,EAAEC,KAAK,EAAE;EAC/C,OAAOP,aAAa,CAACC,aAAa,CAACO,oBAAoB,CAACF,GAAG,EAAEC,KAAK,CAAC;AACrE;AAEA,OAAO,IAAME,WAAW,GAAGzB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}