{"ast":null,"code":"\"use strict\";\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function SceneView(_ref) {\n  var children = _ref.children,\n    navigationState = _ref.navigationState,\n    lazy = _ref.lazy,\n    layout = _ref.layout,\n    index = _ref.index,\n    lazyPreloadDistance = _ref.lazyPreloadDistance,\n    addEnterListener = _ref.addEnterListener,\n    style = _ref.style;\n  var _React$useState = React.useState(Math.abs(navigationState.index - index) > lazyPreloadDistance),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isLoading = _React$useState2[0],\n    setIsLoading = _React$useState2[1];\n  if (isLoading && Math.abs(navigationState.index - index) <= lazyPreloadDistance) {\n    setIsLoading(false);\n  }\n  React.useEffect(function () {\n    var handleEnter = function handleEnter(value) {\n      if (value === index) {\n        setIsLoading(function (prevState) {\n          if (prevState) {\n            return false;\n          }\n          return prevState;\n        });\n      }\n    };\n    var unsubscribe;\n    var timer;\n    if (lazy && isLoading) {\n      unsubscribe = addEnterListener(handleEnter);\n    } else if (isLoading) {\n      timer = setTimeout(function () {\n        return setIsLoading(false);\n      }, 0);\n    }\n    return function () {\n      unsubscribe == null ? void 0 : unsubscribe();\n      clearTimeout(timer);\n    };\n  }, [addEnterListener, index, isLoading, lazy]);\n  var focused = navigationState.index === index;\n  return _jsx(View, {\n    \"aria-hidden\": !focused,\n    style: [styles.route, layout.width ? {\n      width: layout.width\n    } : focused ? StyleSheet.absoluteFill : null, style],\n    children: focused || layout.width ? children({\n      loading: isLoading\n    }) : null\n  });\n}\nvar styles = StyleSheet.create({\n  route: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"names":["React","StyleSheet","View","jsx","_jsx","SceneView","_ref","children","navigationState","lazy","layout","index","lazyPreloadDistance","addEnterListener","style","_React$useState","useState","Math","abs","_React$useState2","_slicedToArray","isLoading","setIsLoading","useEffect","handleEnter","value","prevState","unsubscribe","timer","setTimeout","clearTimeout","focused","styles","route","width","absoluteFill","loading","create","flex","overflow"],"sources":["/Users/akhileshgogikar/Oshan/oshan-app/node_modules/react-native-tab-view/src/SceneView.tsx"],"sourcesContent":["import * as React from 'react';\nimport { type StyleProp, StyleSheet, View, type ViewStyle } from 'react-native';\n\nimport type {\n  EventEmitterProps,\n  NavigationState,\n  Route,\n  SceneRendererProps,\n} from './types';\n\ntype Props<T extends Route> = SceneRendererProps &\n  EventEmitterProps & {\n    navigationState: NavigationState<T>;\n    lazy: boolean;\n    lazyPreloadDistance: number;\n    index: number;\n    children: (props: { loading: boolean }) => React.ReactNode;\n    style?: StyleProp<ViewStyle>;\n  };\n\nexport function SceneView<T extends Route>({\n  children,\n  navigationState,\n  lazy,\n  layout,\n  index,\n  lazyPreloadDistance,\n  addEnterListener,\n  style,\n}: Props<T>) {\n  const [isLoading, setIsLoading] = React.useState(\n    Math.abs(navigationState.index - index) > lazyPreloadDistance\n  );\n\n  if (\n    isLoading &&\n    Math.abs(navigationState.index - index) <= lazyPreloadDistance\n  ) {\n    // Always render the route when it becomes focused\n    setIsLoading(false);\n  }\n\n  React.useEffect(() => {\n    const handleEnter = (value: number) => {\n      // If we're entering the current route, we need to load it\n      if (value === index) {\n        setIsLoading((prevState) => {\n          if (prevState) {\n            return false;\n          }\n          return prevState;\n        });\n      }\n    };\n\n    let unsubscribe: (() => void) | undefined;\n    let timer: ReturnType<typeof setTimeout> | undefined;\n\n    if (lazy && isLoading) {\n      // If lazy mode is enabled, listen to when we enter screens\n      unsubscribe = addEnterListener(handleEnter);\n    } else if (isLoading) {\n      // If lazy mode is not enabled, render the scene with a delay if not loaded already\n      // This improves the initial startup time as the scene is no longer blocking\n      timer = setTimeout(() => setIsLoading(false), 0);\n    }\n\n    return () => {\n      unsubscribe?.();\n      clearTimeout(timer);\n    };\n  }, [addEnterListener, index, isLoading, lazy]);\n\n  const focused = navigationState.index === index;\n\n  return (\n    <View\n      aria-hidden={!focused}\n      style={[\n        styles.route,\n        // If we don't have the layout yet, make the focused screen fill the container\n        // This avoids delay before we are able to render pages side by side\n        layout.width\n          ? { width: layout.width }\n          : focused\n            ? StyleSheet.absoluteFill\n            : null,\n        style,\n      ]}\n    >\n      {\n        // Only render the route only if it's either focused or layout is available\n        // When layout is not available, we must not render unfocused routes\n        // so that the focused route can fill the screen\n        focused || layout.width ? children({ loading: isLoading }) : null\n      }\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  route: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"],"mappings":";;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AACkD,SAAAC,GAAA,IAAAC,IAAA;AAmBhF,OAAO,SAASC,SAASA,CAAAC,IAAA,EASZ;EAAA,IARXC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;IACRC,eAAe,GAAAF,IAAA,CAAfE,eAAe;IACfC,IAAI,GAAAH,IAAA,CAAJG,IAAI;IACJC,MAAM,GAAAJ,IAAA,CAANI,MAAM;IACNC,KAAK,GAAAL,IAAA,CAALK,KAAK;IACLC,mBAAmB,GAAAN,IAAA,CAAnBM,mBAAmB;IACnBC,gBAAgB,GAAAP,IAAA,CAAhBO,gBAAgB;IAChBC,KAAA,GAAAR,IAAA,CAAAQ,KAAA;EAEA,IAAAC,eAAA,GAAkCf,KAAK,CAACgB,QAAQ,CAC9CC,IAAI,CAACC,GAAG,CAACV,eAAe,CAACG,KAAK,GAAGA,KAAK,CAAC,GAAGC,mBAC5C,CAAC;IAAAO,gBAAA,GAAAC,cAAA,CAAAL,eAAA;IAFMM,SAAS,GAAAF,gBAAA;IAAEG,YAAY,GAAAH,gBAAA;EAI9B,IACEE,SAAS,IACTJ,IAAI,CAACC,GAAG,CAACV,eAAe,CAACG,KAAK,GAAGA,KAAK,CAAC,IAAIC,mBAAmB,EAC9D;IAEAU,YAAY,CAAC,KAAK,CAAC;EACrB;EAEAtB,KAAK,CAACuB,SAAS,CAAC,YAAM;IACpB,IAAMC,WAAW,GAAI,SAAfA,WAAWA,CAAIC,KAAa,EAAK;MAErC,IAAIA,KAAK,KAAKd,KAAK,EAAE;QACnBW,YAAY,CAAE,UAAAI,SAAS,EAAK;UAC1B,IAAIA,SAAS,EAAE;YACb,OAAO,KAAK;UACd;UACA,OAAOA,SAAS;QAClB,CAAC,CAAC;MACJ;IACF,CAAC;IAED,IAAIC,WAAqC;IACzC,IAAIC,KAAgD;IAEpD,IAAInB,IAAI,IAAIY,SAAS,EAAE;MAErBM,WAAW,GAAGd,gBAAgB,CAACW,WAAW,CAAC;IAC7C,CAAC,MAAM,IAAIH,SAAS,EAAE;MAGpBO,KAAK,GAAGC,UAAU,CAAC;QAAA,OAAMP,YAAY,CAAC,KAAK,CAAC;MAAA,GAAE,CAAC,CAAC;IAClD;IAEA,OAAO,YAAM;MACXK,WAAW,oBAAXA,WAAW,CAAG,CAAC;MACfG,YAAY,CAACF,KAAK,CAAC;IACrB,CAAC;EACH,CAAC,EAAE,CAACf,gBAAgB,EAAEF,KAAK,EAAEU,SAAS,EAAEZ,IAAI,CAAC,CAAC;EAE9C,IAAMsB,OAAO,GAAGvB,eAAe,CAACG,KAAK,KAAKA,KAAK;EAE/C,OACEP,IAAA,CAACF,IAAI;IACH,eAAa,CAAC6B,OAAQ;IACtBjB,KAAK,EAAE,CACLkB,MAAM,CAACC,KAAK,EAGZvB,MAAM,CAACwB,KAAK,GACR;MAAEA,KAAK,EAAExB,MAAM,CAACwB;IAAM,CAAC,GACvBH,OAAO,GACL9B,UAAU,CAACkC,YAAY,GACvB,IAAI,EACVrB,KAAK,CACL;IAAAP,QAAA,EAMAwB,OAAO,IAAIrB,MAAM,CAACwB,KAAK,GAAG3B,QAAQ,CAAC;MAAE6B,OAAO,EAAEf;IAAU,CAAC,CAAC,GAAG;EAAI,CAE/D,CAAC;AAEX;AAEA,IAAMW,MAAM,GAAG/B,UAAU,CAACoC,MAAM,CAAC;EAC/BJ,KAAK,EAAE;IACLK,IAAI,EAAE,CAAC;IACPC,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}