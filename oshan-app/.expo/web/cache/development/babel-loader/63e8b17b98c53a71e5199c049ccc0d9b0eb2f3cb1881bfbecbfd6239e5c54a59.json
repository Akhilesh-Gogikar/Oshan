{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nexport function fetchPasswordPolicy(_x) {\n  return _fetchPasswordPolicy.apply(this, arguments);\n}\nfunction _fetchPasswordPolicy() {\n  _fetchPasswordPolicy = _asyncToGenerator(function* (auth) {\n    var schemaVersion = 1;\n    try {\n      var baseURL = 'https://identitytoolkit.googleapis.com/v2/passwordPolicy?key=';\n      var apiKey = auth.app.options.apiKey;\n      var response = yield fetch(`${baseURL}${apiKey}`);\n      if (!response.ok) {\n        var errorDetails = yield response.text();\n        throw new Error(`firebase.auth().validatePassword(*) failed to fetch password policy from Firebase Console: ${response.statusText}. Details: ${errorDetails}`);\n      }\n      var passwordPolicy = yield response.json();\n      if (passwordPolicy.schemaVersion !== schemaVersion) {\n        throw new Error(`Password policy schema version mismatch. Expected: ${schemaVersion}, received: ${passwordPolicy.schemaVersion}`);\n      }\n      return passwordPolicy;\n    } catch (error) {\n      throw new Error(`firebase.auth().validatePassword(*) Failed to fetch password policy: ${error.message}`);\n    }\n  });\n  return _fetchPasswordPolicy.apply(this, arguments);\n}\nmodule.exports = {\n  fetchPasswordPolicy: fetchPasswordPolicy\n};","map":{"version":3,"names":["fetchPasswordPolicy","_x","_fetchPasswordPolicy","apply","arguments","_asyncToGenerator","auth","schemaVersion","baseURL","apiKey","app","options","response","fetch","ok","errorDetails","text","Error","statusText","passwordPolicy","json","error","message","module","exports"],"sources":["/Users/akhileshgogikar/Oshan/oshan-app/node_modules/@react-native-firebase/auth/lib/password-policy/passwordPolicyApi.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n/**\n * Performs an API request to Firebase Console to get password policy json.\n *\n * @param {Object} auth - The authentication instance\n * @returns {Promise<Response>} A promise that resolves to the API response.\n * @throws {Error} Throws an error if the request fails or encounters an issue.\n */\nexport async function fetchPasswordPolicy(auth) {\n  let schemaVersion = 1;\n\n  try {\n    // Identity toolkit API endpoint for password policy. Ensure this is enabled on Google cloud.\n    const baseURL = 'https://identitytoolkit.googleapis.com/v2/passwordPolicy?key=';\n    const apiKey = auth.app.options.apiKey;\n\n    const response = await fetch(`${baseURL}${apiKey}`);\n    if (!response.ok) {\n      const errorDetails = await response.text();\n      throw new Error(\n        `firebase.auth().validatePassword(*) failed to fetch password policy from Firebase Console: ${response.statusText}. Details: ${errorDetails}`,\n      );\n    }\n    const passwordPolicy = await response.json();\n\n    if (passwordPolicy.schemaVersion !== schemaVersion) {\n      throw new Error(\n        `Password policy schema version mismatch. Expected: ${schemaVersion}, received: ${passwordPolicy.schemaVersion}`,\n      );\n    }\n    return passwordPolicy;\n  } catch (error) {\n    throw new Error(\n      `firebase.auth().validatePassword(*) Failed to fetch password policy: ${error.message}`,\n    );\n  }\n}\n\nmodule.exports = { fetchPasswordPolicy };\n"],"mappings":";AAwBA,gBAAsBA,mBAAmBA,CAAAC,EAAA;EAAA,OAAAC,oBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AA4BxC,SAAAF,qBAAA;EAAAA,oBAAA,GAAAG,iBAAA,CA5BM,WAAmCC,IAAI,EAAE;IAC9C,IAAIC,aAAa,GAAG,CAAC;IAErB,IAAI;MAEF,IAAMC,OAAO,GAAG,+DAA+D;MAC/E,IAAMC,MAAM,GAAGH,IAAI,CAACI,GAAG,CAACC,OAAO,CAACF,MAAM;MAEtC,IAAMG,QAAQ,SAASC,KAAK,CAAC,GAAGL,OAAO,GAAGC,MAAM,EAAE,CAAC;MACnD,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;QAChB,IAAMC,YAAY,SAASH,QAAQ,CAACI,IAAI,CAAC,CAAC;QAC1C,MAAM,IAAIC,KAAK,CACb,8FAA8FL,QAAQ,CAACM,UAAU,cAAcH,YAAY,EAC7I,CAAC;MACH;MACA,IAAMI,cAAc,SAASP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAE5C,IAAID,cAAc,CAACZ,aAAa,KAAKA,aAAa,EAAE;QAClD,MAAM,IAAIU,KAAK,CACb,sDAAsDV,aAAa,eAAeY,cAAc,CAACZ,aAAa,EAChH,CAAC;MACH;MACA,OAAOY,cAAc;IACvB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,MAAM,IAAIJ,KAAK,CACb,wEAAwEI,KAAK,CAACC,OAAO,EACvF,CAAC;IACH;EACF,CAAC;EAAA,OAAApB,oBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAEDmB,MAAM,CAACC,OAAO,GAAG;EAAExB,mBAAmB,EAAnBA;AAAoB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}