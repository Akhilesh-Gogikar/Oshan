{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { StatusBar } from 'expo-status-bar';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Provider } from 'react-redux';\nimport { store } from \"./src/store/store\";\nimport { ThemeProvider } from \"./src/context/ThemeContext\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport HomeScreen from \"./src/screens/HomeScreen\";\nimport StockDetailScreen from \"./src/screens/StockDetailScreen\";\nimport ExploreScreen from \"./src/screens/ExploreScreen\";\nimport WatchlistScreen from \"./src/screens/WatchlistScreen\";\nimport ChatScreen from \"./src/screens/ChatScreen\";\nimport { insertDocument, connectToMongo, getAllStocks } from \"./src/services/mongoService\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Tab = createBottomTabNavigator();\nvar Stack = createStackNavigator();\nvar MainTabs = function MainTabs() {\n  return _jsxs(Tab.Navigator, {\n    screenOptions: {\n      headerShown: false,\n      tabBarActiveTintColor: '#2563eb',\n      tabBarInactiveTintColor: '#6b7280',\n      tabBarStyle: {\n        backgroundColor: '#ffffff',\n        borderTopColor: '#e5e7eb'\n      }\n    },\n    children: [_jsx(Tab.Screen, {\n      name: \"Home\",\n      component: HomeScreen\n    }), _jsx(Tab.Screen, {\n      name: \"Explore\",\n      component: ExploreScreen\n    }), _jsx(Tab.Screen, {\n      name: \"Watchlist\",\n      component: WatchlistScreen\n    }), _jsx(Tab.Screen, {\n      name: \"Chat\",\n      component: ChatScreen\n    })]\n  });\n};\nvar App = function App() {\n  var handleInsertUser = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        yield connectToMongo();\n        var newUser = {\n          name: 'John Doe',\n          email: 'john.doe@example.com'\n        };\n        yield insertDocument('users', newUser);\n        Alert.alert('Success', 'User added to MongoDB!');\n      } catch (error) {\n        console.error('Error inserting user:', error);\n        Alert.alert('Error', 'Failed to add user to MongoDB.');\n      }\n    });\n    return function handleInsertUser() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  React.useEffect(function () {\n    var fetchStocks = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        try {\n          var stocks = yield getAllStocks();\n          console.log('Fetched stocks:', stocks);\n        } catch (error) {\n          console.error('Error fetching stocks in App.tsx:', error);\n        }\n      });\n      return function fetchStocks() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    fetchStocks();\n  }, []);\n  return _jsx(SafeAreaProvider, {\n    children: _jsx(Provider, {\n      store: store,\n      children: _jsx(ThemeProvider, {\n        children: _jsxs(NavigationContainer, {\n          children: [_jsx(StatusBar, {\n            style: \"dark\",\n            backgroundColor: \"#ffffff\"\n          }), _jsxs(Stack.Navigator, {\n            screenOptions: {\n              headerShown: false\n            },\n            children: [_jsx(Stack.Screen, {\n              name: \"MainTabs\",\n              component: MainTabs\n            }), _jsx(Stack.Screen, {\n              name: \"StockDetail\",\n              component: StockDetailScreen\n            })]\n          }), _jsx(View, {\n            style: styles.buttonContainer,\n            children: _jsx(Button, {\n              title: \"Add Sample User\",\n              onPress: handleInsertUser\n            })\n          })]\n        })\n      })\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  buttonContainer: {\n    padding: 20,\n    backgroundColor: '#f0f0f0'\n  }\n});\nexport default App;","map":{"version":3,"names":["React","NavigationContainer","createBottomTabNavigator","createStackNavigator","StatusBar","SafeAreaProvider","Provider","store","ThemeProvider","Button","View","StyleSheet","Alert","HomeScreen","StockDetailScreen","ExploreScreen","WatchlistScreen","ChatScreen","insertDocument","connectToMongo","getAllStocks","jsx","_jsx","jsxs","_jsxs","Tab","Stack","MainTabs","Navigator","screenOptions","headerShown","tabBarActiveTintColor","tabBarInactiveTintColor","tabBarStyle","backgroundColor","borderTopColor","children","Screen","name","component","App","handleInsertUser","_ref","_asyncToGenerator","newUser","email","alert","error","console","apply","arguments","useEffect","fetchStocks","_ref2","stocks","log","style","styles","buttonContainer","title","onPress","create","padding"],"sources":["/Users/akhileshgogikar/Oshan/oshan-app/App.tsx"],"sourcesContent":["import React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { StatusBar } from 'expo-status-bar';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Provider } from 'react-redux';\nimport { store } from './src/store/store';\nimport { ThemeProvider } from './src/context/ThemeContext';\nimport { Button, View, Text, StyleSheet, Alert } from 'react-native'; // Import necessary components\n\n// Import screens\nimport HomeScreen from './src/screens/HomeScreen';\nimport StockDetailScreen from './src/screens/StockDetailScreen';\nimport ExploreScreen from './src/screens/ExploreScreen';\nimport WatchlistScreen from './src/screens/WatchlistScreen';\nimport ChatScreen from './src/screens/ChatScreen';\n\n// Import MongoDB service functions\nimport { insertDocument, connectToMongo, getAllStocks } from './src/services/mongoService';\n\nexport type RootStackParamList = {\n  MainTabs: undefined;\n  StockDetail: { stockId: string };\n};\n\nconst Tab = createBottomTabNavigator();\nconst Stack = createStackNavigator<RootStackParamList>();\n\nconst MainTabs = () => (\n  <Tab.Navigator\n    screenOptions={{\n      headerShown: false,\n      tabBarActiveTintColor: '#2563eb',\n      tabBarInactiveTintColor: '#6b7280',\n      tabBarStyle: {\n        backgroundColor: '#ffffff',\n        borderTopColor: '#e5e7eb',\n      },\n    }}\n  >\n    <Tab.Screen name=\"Home\" component={HomeScreen} />\n    <Tab.Screen name=\"Explore\" component={ExploreScreen} />\n    <Tab.Screen name=\"Watchlist\" component={WatchlistScreen} />\n    <Tab.Screen name=\"Chat\" component={ChatScreen} />\n  </Tab.Navigator>\n);\n\nconst App = () => {\n  const handleInsertUser = async () => {\n    try {\n      // Ensure connection is established\n      await connectToMongo();\n      const newUser = { name: 'John Doe', email: 'john.doe@example.com' };\n      await insertDocument('users', newUser);\n      Alert.alert('Success', 'User added to MongoDB!');\n    } catch (error) {\n      console.error('Error inserting user:', error);\n      Alert.alert('Error', 'Failed to add user to MongoDB.');\n    }\n  };\n\n  // Fetch stocks when the app loads\n  React.useEffect(() => {\n    const fetchStocks = async () => {\n      try {\n        const stocks = await getAllStocks();\n        console.log('Fetched stocks:', stocks);\n        // Here you would typically store the stocks in state or a global store\n        // For now, we're just logging them.\n      } catch (error) {\n        console.error('Error fetching stocks in App.tsx:', error);\n      }\n    };\n\n    fetchStocks();\n  }, []); // Empty dependency array ensures this runs once on mount\n\n  return (\n    <SafeAreaProvider>\n      <Provider store={store}>\n        <ThemeProvider>\n          <NavigationContainer>\n            <StatusBar style=\"dark\" backgroundColor=\"#ffffff\" />\n            <Stack.Navigator screenOptions={{ headerShown: false }}>\n              <Stack.Screen name=\"MainTabs\" component={MainTabs} />\n              <Stack.Screen name=\"StockDetail\" component={StockDetailScreen} />\n            </Stack.Navigator>\n            {/* Add a button to trigger MongoDB insertion */}\n            <View style={styles.buttonContainer}>\n              <Button title=\"Add Sample User\" onPress={handleInsertUser} />\n            </View>\n          </NavigationContainer>\n        </ThemeProvider>\n      </Provider>\n    </SafeAreaProvider>\n  );\n};\n\n// Basic styling for the button\nconst styles = StyleSheet.create({\n  buttonContainer: {\n    padding: 20,\n    backgroundColor: '#f0f0f0', // Light background for the button area\n  },\n});\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}