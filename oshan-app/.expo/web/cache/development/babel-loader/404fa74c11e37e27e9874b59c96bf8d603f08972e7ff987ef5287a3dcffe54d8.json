{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar MINIMUM_MIN_PASSWORD_LENGTH = 6;\nexport var PasswordPolicyImpl = function () {\n  function PasswordPolicyImpl(response) {\n    var _responseOptions$minP, _response$allowedNonA, _response$allowedNonA2, _response$forceUpgrad;\n    _classCallCheck(this, PasswordPolicyImpl);\n    var responseOptions = response.customStrengthOptions;\n    this.customStrengthOptions = {};\n    this.customStrengthOptions.minPasswordLength = (_responseOptions$minP = responseOptions.minPasswordLength) != null ? _responseOptions$minP : MINIMUM_MIN_PASSWORD_LENGTH;\n    if (responseOptions.maxPasswordLength) {\n      this.customStrengthOptions.maxPasswordLength = responseOptions.maxPasswordLength;\n    }\n    if (responseOptions.containsLowercaseCharacter !== undefined) {\n      this.customStrengthOptions.containsLowercaseLetter = responseOptions.containsLowercaseCharacter;\n    }\n    if (responseOptions.containsUppercaseCharacter !== undefined) {\n      this.customStrengthOptions.containsUppercaseLetter = responseOptions.containsUppercaseCharacter;\n    }\n    if (responseOptions.containsNumericCharacter !== undefined) {\n      this.customStrengthOptions.containsNumericCharacter = responseOptions.containsNumericCharacter;\n    }\n    if (responseOptions.containsNonAlphanumericCharacter !== undefined) {\n      this.customStrengthOptions.containsNonAlphanumericCharacter = responseOptions.containsNonAlphanumericCharacter;\n    }\n    this.enforcementState = response.enforcementState === 'ENFORCEMENT_STATE_UNSPECIFIED' ? 'OFF' : response.enforcementState;\n    this.allowedNonAlphanumericCharacters = (_response$allowedNonA = (_response$allowedNonA2 = response.allowedNonAlphanumericCharacters) == null ? void 0 : _response$allowedNonA2.join('')) != null ? _response$allowedNonA : '';\n    this.forceUpgradeOnSignin = (_response$forceUpgrad = response.forceUpgradeOnSignin) != null ? _response$forceUpgrad : false;\n    this.schemaVersion = response.schemaVersion;\n  }\n  return _createClass(PasswordPolicyImpl, [{\n    key: \"validatePassword\",\n    value: function validatePassword(password) {\n      var _status$meetsMinPassw, _status$meetsMaxPassw, _status$containsLower, _status$containsUpper, _status$containsNumer, _status$containsNonAl;\n      var status = {\n        isValid: true,\n        passwordPolicy: this\n      };\n      this.validatePasswordLengthOptions(password, status);\n      this.validatePasswordCharacterOptions(password, status);\n      status.isValid &&= (_status$meetsMinPassw = status.meetsMinPasswordLength) != null ? _status$meetsMinPassw : true;\n      status.isValid &&= (_status$meetsMaxPassw = status.meetsMaxPasswordLength) != null ? _status$meetsMaxPassw : true;\n      status.isValid &&= (_status$containsLower = status.containsLowercaseLetter) != null ? _status$containsLower : true;\n      status.isValid &&= (_status$containsUpper = status.containsUppercaseLetter) != null ? _status$containsUpper : true;\n      status.isValid &&= (_status$containsNumer = status.containsNumericCharacter) != null ? _status$containsNumer : true;\n      status.isValid &&= (_status$containsNonAl = status.containsNonAlphanumericCharacter) != null ? _status$containsNonAl : true;\n      return status;\n    }\n  }, {\n    key: \"validatePasswordLengthOptions\",\n    value: function validatePasswordLengthOptions(password, status) {\n      var minPasswordLength = this.customStrengthOptions.minPasswordLength;\n      var maxPasswordLength = this.customStrengthOptions.maxPasswordLength;\n      if (minPasswordLength) {\n        status.meetsMinPasswordLength = password.length >= minPasswordLength;\n      }\n      if (maxPasswordLength) {\n        status.meetsMaxPasswordLength = password.length <= maxPasswordLength;\n      }\n    }\n  }, {\n    key: \"validatePasswordCharacterOptions\",\n    value: function validatePasswordCharacterOptions(password, status) {\n      this.updatePasswordCharacterOptionsStatuses(status, false, false, false, false);\n      for (var i = 0; i < password.length; i++) {\n        var passwordChar = password.charAt(i);\n        this.updatePasswordCharacterOptionsStatuses(status, passwordChar >= 'a' && passwordChar <= 'z', passwordChar >= 'A' && passwordChar <= 'Z', passwordChar >= '0' && passwordChar <= '9', this.allowedNonAlphanumericCharacters.includes(passwordChar));\n      }\n    }\n  }, {\n    key: \"updatePasswordCharacterOptionsStatuses\",\n    value: function updatePasswordCharacterOptionsStatuses(status, containsLowercaseCharacter, containsUppercaseCharacter, containsNumericCharacter, containsNonAlphanumericCharacter) {\n      if (this.customStrengthOptions.containsLowercaseLetter) {\n        status.containsLowercaseLetter ||= containsLowercaseCharacter;\n      }\n      if (this.customStrengthOptions.containsUppercaseLetter) {\n        status.containsUppercaseLetter ||= containsUppercaseCharacter;\n      }\n      if (this.customStrengthOptions.containsNumericCharacter) {\n        status.containsNumericCharacter ||= containsNumericCharacter;\n      }\n      if (this.customStrengthOptions.containsNonAlphanumericCharacter) {\n        status.containsNonAlphanumericCharacter ||= containsNonAlphanumericCharacter;\n      }\n    }\n  }]);\n}();\nexport default PasswordPolicyImpl;","map":{"version":3,"names":["MINIMUM_MIN_PASSWORD_LENGTH","PasswordPolicyImpl","response","_responseOptions$minP","_response$allowedNonA","_response$allowedNonA2","_response$forceUpgrad","_classCallCheck","responseOptions","customStrengthOptions","minPasswordLength","maxPasswordLength","containsLowercaseCharacter","undefined","containsLowercaseLetter","containsUppercaseCharacter","containsUppercaseLetter","containsNumericCharacter","containsNonAlphanumericCharacter","enforcementState","allowedNonAlphanumericCharacters","join","forceUpgradeOnSignin","schemaVersion","_createClass","key","value","validatePassword","password","_status$meetsMinPassw","_status$meetsMaxPassw","_status$containsLower","_status$containsUpper","_status$containsNumer","_status$containsNonAl","status","isValid","passwordPolicy","validatePasswordLengthOptions","validatePasswordCharacterOptions","meetsMinPasswordLength","meetsMaxPasswordLength","length","updatePasswordCharacterOptionsStatuses","i","passwordChar","charAt","includes"],"sources":["/Users/akhileshgogikar/Oshan/oshan-app/node_modules/@react-native-firebase/auth/lib/password-policy/PasswordPolicyImpl.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n// Minimum min password length enforced by the backend, even if no minimum length is set.\nconst MINIMUM_MIN_PASSWORD_LENGTH = 6;\n\n/**\n * Stores password policy requirements and provides password validation against the policy.\n *\n * @internal\n */\nexport class PasswordPolicyImpl {\n  constructor(response) {\n    // Only include custom strength options defined in the response.\n    const responseOptions = response.customStrengthOptions;\n    this.customStrengthOptions = {};\n    this.customStrengthOptions.minPasswordLength =\n      responseOptions.minPasswordLength ?? MINIMUM_MIN_PASSWORD_LENGTH;\n    if (responseOptions.maxPasswordLength) {\n      this.customStrengthOptions.maxPasswordLength = responseOptions.maxPasswordLength;\n    }\n    if (responseOptions.containsLowercaseCharacter !== undefined) {\n      this.customStrengthOptions.containsLowercaseLetter =\n        responseOptions.containsLowercaseCharacter;\n    }\n    if (responseOptions.containsUppercaseCharacter !== undefined) {\n      this.customStrengthOptions.containsUppercaseLetter =\n        responseOptions.containsUppercaseCharacter;\n    }\n    if (responseOptions.containsNumericCharacter !== undefined) {\n      this.customStrengthOptions.containsNumericCharacter =\n        responseOptions.containsNumericCharacter;\n    }\n    if (responseOptions.containsNonAlphanumericCharacter !== undefined) {\n      this.customStrengthOptions.containsNonAlphanumericCharacter =\n        responseOptions.containsNonAlphanumericCharacter;\n    }\n\n    this.enforcementState =\n      response.enforcementState === 'ENFORCEMENT_STATE_UNSPECIFIED'\n        ? 'OFF'\n        : response.enforcementState;\n\n    // Use an empty string if no non-alphanumeric characters are specified in the response.\n    this.allowedNonAlphanumericCharacters =\n      response.allowedNonAlphanumericCharacters?.join('') ?? '';\n\n    this.forceUpgradeOnSignin = response.forceUpgradeOnSignin ?? false;\n    this.schemaVersion = response.schemaVersion;\n  }\n\n  validatePassword(password) {\n    const status = {\n      isValid: true,\n      passwordPolicy: this,\n    };\n\n    this.validatePasswordLengthOptions(password, status);\n    this.validatePasswordCharacterOptions(password, status);\n\n    status.isValid &&= status.meetsMinPasswordLength ?? true;\n    status.isValid &&= status.meetsMaxPasswordLength ?? true;\n    status.isValid &&= status.containsLowercaseLetter ?? true;\n    status.isValid &&= status.containsUppercaseLetter ?? true;\n    status.isValid &&= status.containsNumericCharacter ?? true;\n    status.isValid &&= status.containsNonAlphanumericCharacter ?? true;\n\n    return status;\n  }\n\n  validatePasswordLengthOptions(password, status) {\n    const minPasswordLength = this.customStrengthOptions.minPasswordLength;\n    const maxPasswordLength = this.customStrengthOptions.maxPasswordLength;\n    if (minPasswordLength) {\n      status.meetsMinPasswordLength = password.length >= minPasswordLength;\n    }\n    if (maxPasswordLength) {\n      status.meetsMaxPasswordLength = password.length <= maxPasswordLength;\n    }\n  }\n\n  validatePasswordCharacterOptions(password, status) {\n    this.updatePasswordCharacterOptionsStatuses(status, false, false, false, false);\n\n    for (let i = 0; i < password.length; i++) {\n      const passwordChar = password.charAt(i);\n      this.updatePasswordCharacterOptionsStatuses(\n        status,\n        passwordChar >= 'a' && passwordChar <= 'z',\n        passwordChar >= 'A' && passwordChar <= 'Z',\n        passwordChar >= '0' && passwordChar <= '9',\n        this.allowedNonAlphanumericCharacters.includes(passwordChar),\n      );\n    }\n  }\n\n  updatePasswordCharacterOptionsStatuses(\n    status,\n    containsLowercaseCharacter,\n    containsUppercaseCharacter,\n    containsNumericCharacter,\n    containsNonAlphanumericCharacter,\n  ) {\n    if (this.customStrengthOptions.containsLowercaseLetter) {\n      status.containsLowercaseLetter ||= containsLowercaseCharacter;\n    }\n    if (this.customStrengthOptions.containsUppercaseLetter) {\n      status.containsUppercaseLetter ||= containsUppercaseCharacter;\n    }\n    if (this.customStrengthOptions.containsNumericCharacter) {\n      status.containsNumericCharacter ||= containsNumericCharacter;\n    }\n    if (this.customStrengthOptions.containsNonAlphanumericCharacter) {\n      status.containsNonAlphanumericCharacter ||= containsNonAlphanumericCharacter;\n    }\n  }\n}\nexport default PasswordPolicyImpl;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}