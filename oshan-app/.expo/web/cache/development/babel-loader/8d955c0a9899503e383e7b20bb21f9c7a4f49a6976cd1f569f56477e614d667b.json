{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport axios from 'axios';\nimport { API_BASE_URL } from '../constants/constants';\nvar apiService = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\napiService.interceptors.request.use(function (config) {\n  var token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\napiService.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  if (error.response) {\n    console.error('API Error:', error.response.data);\n    return Promise.reject(error.response.data);\n  } else if (error.request) {\n    console.error('Network Error:', error.request);\n    return Promise.reject({\n      error: 'Network error'\n    });\n  } else {\n    console.error('Request Error:', error.message);\n    return Promise.reject({\n      error: error.message\n    });\n  }\n});\nexport var getStocks = function () {\n  var _ref = _asyncToGenerator(function* () {\n    var response = yield apiService.get('/stocks');\n    return response.data;\n  });\n  return function getStocks() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getStock = function () {\n  var _ref2 = _asyncToGenerator(function* (id) {\n    var response = yield apiService.get(`/stocks/${id}`);\n    return response.data;\n  });\n  return function getStock(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getInsights = function () {\n  var _ref3 = _asyncToGenerator(function* () {\n    var response = yield apiService.get('/insights');\n    return response.data;\n  });\n  return function getInsights() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getInsightsByStock = function () {\n  var _ref4 = _asyncToGenerator(function* (stockId) {\n    var response = yield apiService.get(`/insights/stock/${stockId}`);\n    return response.data;\n  });\n  return function getInsightsByStock(_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var getNews = function () {\n  var _ref5 = _asyncToGenerator(function* () {\n    var response = yield apiService.get('/news');\n    return response.data;\n  });\n  return function getNews() {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var getNewsByStock = function () {\n  var _ref6 = _asyncToGenerator(function* (stockId) {\n    var response = yield apiService.get(`/news/stock/${stockId}`);\n    return response.data;\n  });\n  return function getNewsByStock(_x3) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var sendChatMessage = function () {\n  var _ref7 = _asyncToGenerator(function* (messages) {\n    var response = yield apiService.post('/chat', {\n      messages: messages\n    });\n    return response.data;\n  });\n  return function sendChatMessage(_x4) {\n    return _ref7.apply(this, arguments);\n  };\n}();\nexport default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","apiService","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","console","data","message","getStocks","_ref","_asyncToGenerator","get","apply","arguments","getStock","_ref2","id","_x","getInsights","_ref3","getInsightsByStock","_ref4","stockId","_x2","getNews","_ref5","getNewsByStock","_ref6","_x3","sendChatMessage","_ref7","messages","post","_x4"],"sources":["/Users/akhileshgogikar/Oshan/oshan-app/src/services/apiService.ts"],"sourcesContent":["import axios from 'axios';\nimport { Stock, AIInsight, NewsArticle, ChatMessage } from '../types/models';\nimport { API_BASE_URL } from '../constants/constants';\n\nconst apiService = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add request interceptor\napiService.interceptors.request.use(\n  (config) => {\n    // Add authentication token if available\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Add response interceptor\napiService.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    // Handle errors globally\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      console.error('API Error:', error.response.data);\n      return Promise.reject(error.response.data);\n    } else if (error.request) {\n      // The request was made but no response was received\n      console.error('Network Error:', error.request);\n      return Promise.reject({ error: 'Network error' });\n    } else {\n      // Something happened in setting up the request\n      console.error('Request Error:', error.message);\n      return Promise.reject({ error: error.message });\n    }\n  }\n);\n\n// API Methods\nexport const getStocks = async (): Promise<Stock[]> => {\n  const response = await apiService.get('/stocks');\n  return response.data;\n};\n\nexport const getStock = async (id: string): Promise<Stock> => {\n  const response = await apiService.get(`/stocks/${id}`);\n  return response.data;\n};\n\nexport const getInsights = async (): Promise<AIInsight[]> => {\n  const response = await apiService.get('/insights');\n  return response.data;\n};\n\nexport const getInsightsByStock = async (stockId: string): Promise<AIInsight[]> => {\n  const response = await apiService.get(`/insights/stock/${stockId}`);\n  return response.data;\n};\n\nexport const getNews = async (): Promise<NewsArticle[]> => {\n  const response = await apiService.get('/news');\n  return response.data;\n};\n\nexport const getNewsByStock = async (stockId: string): Promise<NewsArticle[]> => {\n  const response = await apiService.get(`/news/stock/${stockId}`);\n  return response.data;\n};\n\nexport const sendChatMessage = async (messages: ChatMessage[]): Promise<any> => {\n  const response = await apiService.post('/chat', { messages });\n  return response.data;\n};\n\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}