{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { MongoClient } from 'mongodb';\nimport dotenv from 'dotenv';\ndotenv.config();\nvar uri = process.env.MONGODB_URI;\nvar dbName = new URL(uri).pathname.substring(1);\nvar client;\nvar db;\nfunction connectToMongo() {\n  return _connectToMongo.apply(this, arguments);\n}\nfunction _connectToMongo() {\n  _connectToMongo = _asyncToGenerator(function* () {\n    if (db) {\n      return db;\n    }\n    if (!uri) {\n      throw new Error('MongoDB URI not found in environment variables.');\n    }\n    try {\n      client = new MongoClient(uri);\n      yield client.connect();\n      db = client.db(dbName);\n      console.log('Connected successfully to MongoDB');\n      return db;\n    } catch (error) {\n      console.error('Error connecting to MongoDB:', error);\n      throw error;\n    }\n  });\n  return _connectToMongo.apply(this, arguments);\n}\nfunction insertDocument(_x, _x2) {\n  return _insertDocument.apply(this, arguments);\n}\nfunction _insertDocument() {\n  _insertDocument = _asyncToGenerator(function* (collectionName, document) {\n    var database = yield connectToMongo();\n    var collection = database.collection(collectionName);\n    var result = yield collection.insertOne(document);\n    console.log(`A document was inserted with the _id: ${result.insertedId}`);\n    return result;\n  });\n  return _insertDocument.apply(this, arguments);\n}\nfunction findDocuments(_x3) {\n  return _findDocuments.apply(this, arguments);\n}\nfunction _findDocuments() {\n  _findDocuments = _asyncToGenerator(function* (collectionName) {\n    var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var database = yield connectToMongo();\n    var collection = database.collection(collectionName);\n    var cursor = collection.find(query);\n    var documents = yield cursor.toArray();\n    console.log(`Found ${documents.length} documents`);\n    return documents;\n  });\n  return _findDocuments.apply(this, arguments);\n}\nfunction closeMongoConnection() {\n  return _closeMongoConnection.apply(this, arguments);\n}\nfunction _closeMongoConnection() {\n  _closeMongoConnection = _asyncToGenerator(function* () {\n    if (client) {\n      yield client.close();\n      console.log('MongoDB connection closed');\n    }\n  });\n  return _closeMongoConnection.apply(this, arguments);\n}\nexport function getAllStocks() {\n  return _getAllStocks.apply(this, arguments);\n}\nfunction _getAllStocks() {\n  _getAllStocks = _asyncToGenerator(function* () {\n    try {\n      var stocks = yield findDocuments('stocks');\n      return stocks;\n    } catch (error) {\n      console.error('Error fetching stocks:', error);\n      throw error;\n    }\n  });\n  return _getAllStocks.apply(this, arguments);\n}\nexport { connectToMongo, insertDocument, findDocuments, closeMongoConnection };","map":{"version":3,"names":["MongoClient","dotenv","config","uri","process","env","MONGODB_URI","dbName","URL","pathname","substring","client","db","connectToMongo","_connectToMongo","apply","arguments","_asyncToGenerator","Error","connect","console","log","error","insertDocument","_x","_x2","_insertDocument","collectionName","document","database","collection","result","insertOne","insertedId","findDocuments","_x3","_findDocuments","query","length","undefined","cursor","find","documents","toArray","closeMongoConnection","_closeMongoConnection","close","getAllStocks","_getAllStocks","stocks"],"sources":["/Users/akhileshgogikar/Oshan/oshan-app/src/services/mongoService.ts"],"sourcesContent":["import { MongoClient, Db } from 'mongodb';\nimport dotenv from 'dotenv';\n\ndotenv.config(); // Load environment variables from .env file\n\nconst uri = process.env.MONGODB_URI;\nconst dbName = new URL(uri!).pathname.substring(1); // Extract db name from URI\n\nlet client: MongoClient;\nlet db: Db;\n\nasync function connectToMongo() {\n  if (db) {\n    return db;\n  }\n\n  if (!uri) {\n    throw new Error('MongoDB URI not found in environment variables.');\n  }\n\n  try {\n    client = new MongoClient(uri);\n    await client.connect();\n    db = client.db(dbName);\n    console.log('Connected successfully to MongoDB');\n    return db;\n  } catch (error) {\n    console.error('Error connecting to MongoDB:', error);\n    throw error;\n  }\n}\n\n// Example function to insert a document\nasync function insertDocument(collectionName: string, document: object) {\n  const database = await connectToMongo();\n  const collection = database.collection(collectionName);\n  const result = await collection.insertOne(document);\n  console.log(`A document was inserted with the _id: ${result.insertedId}`);\n  return result;\n}\n\n// Example function to find documents\nasync function findDocuments(collectionName: string, query: object = {}) {\n  const database = await connectToMongo();\n  const collection = database.collection(collectionName);\n  const cursor = collection.find(query);\n  const documents = await cursor.toArray();\n  console.log(`Found ${documents.length} documents`);\n  return documents;\n}\n\n// Close the connection when the application is shutting down\nasync function closeMongoConnection() {\n  if (client) {\n    await client.close();\n    console.log('MongoDB connection closed');\n  }\n}\n\n// Function to retrieve all stocks\nexport async function getAllStocks() {\n  try {\n    const stocks = await findDocuments('stocks');\n    return stocks;\n  } catch (error) {\n    console.error('Error fetching stocks:', error);\n    throw error;\n  }\n}\nexport { connectToMongo, insertDocument, findDocuments, closeMongoConnection };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}